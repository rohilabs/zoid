{"version":3,"sources":["webpack://zoid/webpack/universalModuleDefinition","webpack://zoid/webpack/bootstrap","webpack://zoid/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://zoid/./node_modules/zalgo-promise/src/utils.js","webpack://zoid/./node_modules/zalgo-promise/src/exceptions.js","webpack://zoid/./node_modules/zalgo-promise/src/flush.js","webpack://zoid/./node_modules/zalgo-promise/src/promise.js","webpack://zoid/./node_modules/cross-domain-utils/src/util.js","webpack://zoid/./node_modules/cross-domain-utils/src/constants.js","webpack://zoid/./node_modules/cross-domain-utils/src/utils.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/util.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack://zoid/./node_modules/belter/src/util.js","webpack://zoid/./node_modules/belter/src/dom.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/native.js","webpack://zoid/./node_modules/belter/src/css.js","webpack://zoid/./node_modules/post-robot/src/conf/config.js","webpack://zoid/./node_modules/post-robot/src/conf/constants.js","webpack://zoid/./node_modules/post-robot/src/global.js","webpack://zoid/./node_modules/post-robot/src/lib/hello.js","webpack://zoid/./node_modules/post-robot/src/lib/windows.js","webpack://zoid/./node_modules/universal-serialize/src/constants.js","webpack://zoid/./node_modules/universal-serialize/src/common.js","webpack://zoid/./node_modules/universal-serialize/src/serialize.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/function.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/error.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/promise.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/regex.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/date.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/array.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/object.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/string.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/number.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/boolean.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/null.js","webpack://zoid/./node_modules/universal-serialize/src/deserialize.js","webpack://zoid/./node_modules/post-robot/src/serialize/window.js","webpack://zoid/./node_modules/post-robot/src/bridge/common.js","webpack://zoid/./node_modules/post-robot/src/serialize/function.js","webpack://zoid/./node_modules/post-robot/src/serialize/serialize.js","webpack://zoid/./node_modules/post-robot/src/serialize/promise.js","webpack://zoid/./node_modules/post-robot/src/drivers/send/strategies.js","webpack://zoid/./node_modules/post-robot/src/drivers/send/index.js","webpack://zoid/./node_modules/post-robot/src/lib/compat.js","webpack://zoid/./node_modules/post-robot/src/drivers/listeners.js","webpack://zoid/./node_modules/post-robot/src/drivers/receive/types.js","webpack://zoid/./node_modules/post-robot/src/drivers/receive/index.js","webpack://zoid/./node_modules/post-robot/src/public/on.js","webpack://zoid/./node_modules/post-robot/src/public/send.js","webpack://zoid/./node_modules/post-robot/src/index.js","webpack://zoid/./node_modules/post-robot/src/setup.js","webpack://zoid/./src/lib/global.js","webpack://zoid/./src/lib/serialize.js","webpack://zoid/./src/constants.js","webpack://zoid/./src/child/props.js","webpack://zoid/./src/child/window.js","webpack://zoid/./src/child/index.js","webpack://zoid/./src/parent/drivers.js","webpack://zoid/./src/parent/props.js","webpack://zoid/./node_modules/post-robot/src/clean.js","webpack://zoid/./src/parent/index.js","webpack://zoid/./src/delegate/index.js","webpack://zoid/./src/drivers/react.js","webpack://zoid/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://zoid/./src/drivers/vue.js","webpack://zoid/./src/drivers/angular.js","webpack://zoid/./src/drivers/angular2.js","webpack://zoid/./src/component/templates/container.js","webpack://zoid/./src/component/templates/component.js","webpack://zoid/./src/component/props.js","webpack://zoid/./src/component/component.js","webpack://zoid/./src/component/validate.js","webpack://zoid/./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","hasOwnProperty","p","s","_extends","assign","target","arguments","length","source","apply","isPromise","item","Promise","window","Window","constructor","toString","then","err","flushPromise","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","resolved","rejected","errorHandled","error","handlers","dispatching","stack","result","isAsync","res","reject","Error","dispatch","setTimeout","indexOf","push","j","dispatchPossiblyUnhandledError","asyncReject","onSuccess","onError","catch","undefined","finally","onFinally","try","timeout","time","clearTimeout","toPromise","TypeError","all","promises","count","results","prom","hash","keys","map","items","method","onPossiblyUnhandledException","cancel","splice","context","args","delay","flush","isRegex","PROTOCOL","MOCK","FILE","ABOUT","WILDCARD","WINDOW_TYPE","IFRAME","POPUP","IE_WIN_ACCESS_ERROR","isAboutProtocol","win","location","protocol","getParent","parent","getOpener","opener","canReadFromWindow","getActualDomain","host","getDomain","domain","mockDomain","isSameDomain","desc","getOwnPropertyDescriptor","isActuallySameDomain","assertSameDomain","isAncestorParent","child","childParent","getParents","getFrames","frames","len","frame","getAllChildFrames","getTop","top","getAllFramesInWindow","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","iframeIndex","collection","safeIndexOf","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","getAncestor","anyMatch","collection1","collection2","item1","getDistanceFromTop","distance","isSameTopWindow","win1","win2","top1","top2","allFrames1","allFrames2","opener1","opener2","matchDomain","pattern","origin","Array","isArray","Boolean","match","JSON","stringify","some","subpattern","getDomainFromUrl","url","split","slice","join","onCloseWindow","callback","maxtime","Infinity","check","isWindow","obj","__cross_domain_utils_window_check__","objectIDs","awaitFrameLoadPromises","CrossDomainSafeWeakMap","weakmap","values","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","_cleanupClosedWindows","delete","isSafeToReadWrite","entry","writable","index","has","getOrSet","base64encode","str","btoa","unescape","encodeURIComponent","Buffer","from","uniqueID","chars","replace","charAt","floor","Date","toISOString","toLowerCase","serializeArgs","subkey","val","uid","getObjectID","memoizePromise","cache","memoizedPromiseFunction","reset","inlineMemoize","logic","__inline_memoize_cache__","noop","once","called","stringifyError","level","newErr","extend","safeInterval","loop","defineLazyProp","configurable","arrayFrom","isObjectObject","isPlainObject","prototype","replaceObject","replacer","fullKey","itemKey","isDefined","cleanup","tasks","cleaned","register","task","pop","assertExists","thing","isDocumentReady","document","body","readyState","urlEncode","waitForDocumentReady","interval","setInterval","clearInterval","parseQuery","queryString","params","pair","decodeURIComponent","extendQuery","originalQuery","props","filter","appendChild","container","isElement","element","Element","nodeType","style","getElementSafe","id","querySelector","elementReady","el","PopupOpenError","awaitFrameLoad","addEventListener","cleanIframes","linkFrameWindow","awaitFrameWindow","loadedFrame","iframe","options","tag","styleText","createElement","class","className","setAttribute","attributes","styleSheet","cssText","createTextNode","html","innerHTML","allowTransparency","backgroundColor","border","isIE","navigator","userAgent","hasAttribute","getElement","event","removeEventListener","destroyElement","removeChild","isElementClosed","onResize","width","height","currentWidth","offsetWidth","currentHeight","offsetHeight","observer","newWidth","newHeight","ResizeObserver","observe","MutationObserver","childList","subtree","characterData","disconnect","isPerc","test","isPx","toPx","parseInt","toNum","toCSS","MESSAGE_NAME","METHOD","HELLO","OPEN_TUNNEL","SERIALIZATION_TYPE","CROSS_DOMAIN_ZALGO_PROMISE","CROSS_DOMAIN_FUNCTION","CROSS_DOMAIN_WINDOW","getGlobal","getObj","globalStore","defStore","store","storeKey","defVal","del","WildCard","getWildcard","global","WINDOW_WILDCARD","windowStore","winStore","getStore","getInstanceID","getHelloPromise","sayHello","send","instanceID","data","getWindowInstanceID","markWindowKnown","TYPE","FUNCTION","ERROR","PROMISE","REGEX","DATE","ARRAY","OBJECT","STRING","NUMBER","BOOLEAN","NULL","UNDEFINED","isSerializedType","__type__","determineType","serializeType","type","__val__","SERIALIZER","code","toJSON","defaultSerializers","DESERIALIZER","RegExp","defaultDeserializers","cleanupProxyWindows","idToProxyWindow","shouldClean","getSerializedWindow","windowName","close","closeWindow","getName","focus","isClosed","setLocation","href","setName","frameElement","ProxyWindow","serializedWindow","actualWindow","isProxyWindow","actualWindowPromise","setWindow","getType","isPopup","isIframe","open","getWindow","awaitWindow","matchWindow","proxyInstanceID","knownWindowInstanceID","unwrap","serialize","toProxyWindow","deserialize","on","realWin","proxyWindow","addMethod","methodStore","proxyWindowMethods","lookupMethod","serializeFunction","destination","meth","methodSource","listenForFunctionCalls","__id__","__name__","serializeMessage","serializers","serializer","serializePromise","deserializeMessage","deserializers","parse","deserializer","serializedPromise","serializedFunction","getDeserializedFunction","opts","crossDomainFunctionWrapper","fireAndForget","__origin__","__source__","deserializeFunction","SEND_MESSAGE_STRATEGIES","sendMessage","serializedMessage","strategies","errors","strategyName","dom","forEach","postMessage","mockUserAgent","getUserAgent","foreignGlobal","receiveMessage","__DOMAIN_REGEX__","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","requestListeners","winQualifier","nameListeners","domainListeners","listener","regex","RECEIVE_MESSAGE_TYPES","sendResponse","ack","response","pathname","handleError","receivedMessages","parsedMessage","parseMessage","requestListener","addRequestListener","listenersCollection","existingListener","regexListeners","regexListener","strDomain","errorHandler","bridge","responseTimeout","childTimeout","validateOptions","actualParent","isAncestor","awaitWindowHello","normalizeDomain","targetDomain","logName","responseListener","addResponseListener","reqPromises","markResponseListenerErrored","totalAckTimeout","isWindowKnown","totalResTimeout","ackTimeout","resTimeout","cancelled","max","internalSerializeMessage","internalDeserializeMessage","getProxyObject","ZOID","POST_MESSAGE","PROP_TYPE","PROP_SERIALIZATION","DOTIFY","BASE64","CONTEXT","DEFAULT_DIMENSIONS","WIDTH","HEIGHT","EVENT","RENDER","RENDERED","DISPLAY","CLOSE","PROPS","RESIZE","normalizeChildProp","component","helpers","prop","getPropDefinition","childDecorate","parseChildWindowName","zoidcomp","encodedPayload","atob","escape","base64decode","getChildPayload","ChildComponent","parentDomain","parentComponentWindow","onPropHandlers","autoResize","childPayload","__ZOID__","version","getParentComponentWindow","checkParentDomain","initialProps","getPropsByRef","setProps","watchForClose","init","buildExports","watchForResize","getHelpers","resize","onProps","getParentDomain","allowedParentDomains","ref","getNthParent","ancestor","windows","getProps","isUpdate","existingProps","sameDomain","alias","getPropNames","normalizeChildProps","checkClose","destroy","getAutoResize","updateProps","RENDER_DRIVERS","getQueryParam","queryParam","getQueryValue","queryValue","openOnClick","openFrame","title","proxyFrame","frameWatcher","clean","cleanUpWindow","openPrerenderFrame","openPrerender","proxyWin","proxyPrerenderFrame","prerenderFrame","prerenderFrameWindow","delegate","ParentComponent","driver","initPromise","handledErrors","state","setupEvents","registerActiveComponent","destroyActiveComponent","watchForUnload","triggered","eventName","handlerList","trigger","triggerOnce","onRender","onDisplay","onRendered","onClose","render","log","childDomain","getChildDomain","checkAllowRender","buildUrl","getProxyContainer","renderContainer","proxyContainer","setState","setProxyWin","prerender","proxyPrerenderWin","buildWindowName","setWindowName","loadUrl","openBridge","runTimeout","containerElement","buildChildPayload","getPropsRef","getPropsForChild","propRef","getWindowRef","buildParentExports","validate","inputProps","propNames","aliases","propDef","default","decorate","required","extendProps","propsDef","builtinProps","serialization","dotify","prefix","newobj","every","dotkey","query","originalUrl","originalHash","hashString","extendUrl","normalizeMockUrl","getUrl","sendToChild","windowProp","propName","allowDelegate","overridesPromise","overrides","unloadWindowListener","initChild","secondClosed","prerenderTemplate","prerenderWindow","isBlankDomain","renderTemplate","tagName","children","writeElementToWindow","renderer","dimensions","innerContainer","containerTemplate","DelegateComponent","watchForSourceClose","getDelegate","getOverrides","closeSourceWindowListener","react","React","ReactDOM","subClass","superClass","__proto__","componentDidMount","findDOMNode","componentDidUpdate","Component","vue","Vue","inheritAttrs","mounted","$el","$attrs","watch","deep","angular","ng","directive","g","toUpperCase","scope","restrict","controller","$scope","$element","safeApply","$root","$$phase","$apply","instance","$watch","angular2","zoid","AngularComponent","NgModule","ElementRef","NgZone","internalProps","zone","run","ComponentInstance","selector","template","inputs","Class","elementRef","_props","ngOnInit","targetElement","nativeElement","ngDoCheck","obj1","obj2","checked","equals","declarations","CLASS","VISIBLE","INVISIBLE","defaultContainerTemplate","div","classList","add","cspNonce","remove","defaultPrerenderTemplate","spinner","defaultNoop","decorateOnce","bridgeUrl","defaultContext","driverCache","xprops","logger","PROP_TYPE_LIST","validatePropDefinitions","components","popup","debug","info","warn","registerChild","listenDelegate","dep","drivers","isChild","canRenderTo","getBridgeUrl","payload","getDefaultContainer","getDefaultContext","renderTo","activeComponents","initialized","setupGlobalReceiveMessage","sourceElement","originalEvent","messageListener","initHello","destroyAll","destroyBridges","destroyComponents","responseListeners","cancelResponseListeners"],"mappings":"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","file":"zoid.frameworks.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"zoid\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"zoid\"] = factory();\n\telse\n\t\troot[\"zoid\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && window.Window && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && window.constructor && item instanceof window.constructor) {\n            return false;\n        }\n\n        let toString = ({}).toString;\n\n        if (toString) {\n            let name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers : Array<(mixed, promise? : ZalgoPromise<mixed>) => void> = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<mixed>) => void) : { cancel : () => void } {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    let promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    handlers : Array<{\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    }>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            // $FlowFixMe\n            let err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        let { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            let { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n\n                if (result.resolved) {\n                    promise.resolve(result.value);\n                } else {\n                    promise.reject(result.error);\n                }\n\n                result.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    result.then(res => {\n                        promise.resolve(res);\n                    }, err => {\n                        promise.reject(err);\n                    });\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X : mixed, Y : mixed>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        let promise : ZalgoPromise<X | Y> = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X : mixed, Y : mixed>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        return this.then(undefined, onError);\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        let timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    static resolve<X : mixed>(value : X | ZalgoPromise<X>) : ZalgoPromise<X> {\n\n        if (value instanceof ZalgoPromise) {\n            return value;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : Array<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        let promise = new ZalgoPromise();\n        let count = promises.length;\n        let results = [];\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        for (let i = 0; i < promises.length; i++) {\n            let prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            ZalgoPromise.resolve(prom).then(result => {\n                results[i] = result;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                promise.reject(err);\n            });\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : Object>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        let result = {};\n        \n        return ZalgoPromise.all(Object.keys(promises).map(key => {\n            return ZalgoPromise.resolve(promises[key]).then(value => {\n                result[key] = value;\n            });\n        })).then(() => {\n            return result;\n        });\n    }\n\n    static map<T, X>(items : Array<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<Array<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : { cancel : () => void } {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X : mixed, Y : mixed, C : mixed, A : Array<mixed>>(method : (...args : A) => (ZalgoPromise<X> | Y), context : ?C, args : ?A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result;\n\n        startActive();\n        \n        try {\n            // $FlowFixMe\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        return ZalgoPromise.resolve(result);\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win : CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    return [ ...getAllChildFrames(top), top ];\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup() : boolean {\n    return Boolean(getOpener(window));\n}\n\nexport function isIframe() : boolean {\n    return Boolean(getParent(window));\n}\n\nexport function isFullpage() : boolean {\n    return Boolean(!isIframe() && !isPopup());\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (noop(obj === obj) === '__unlikely_value__') { // eslint-disable-line no-self-compare\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (obj && obj.__cross_domain_utils_window_check__ === '__unlikely_value__') {\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n\nexport function closeWindow(win : CrossDomainWindowType) {\n    try {\n        win.close();\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let name = this.name;\n                let entry = key[name];\n\n                if (entry && entry[0] === key) {\n                    entry[1] = value;\n                } else {\n                    Object.defineProperty(key, name, {\n                        value:    [ key, value ],\n                        writable: true\n                    });\n                }\n\n                return;\n\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let values = this.values;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            keys.push(key);\n            values.push(value);\n        } else {\n            values[index] = value;\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n                \n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return entry[1];\n                }\n\n                return;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            return;\n        }\n\n        return this.values[index];\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    entry[0] = entry[1] = undefined;\n                }\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index !== -1) {\n            keys.splice(index, 1);\n            this.values.splice(index, 1);\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return true;\n                }\n\n                return false;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let index = safeIndexOf(this.keys, key);\n        return index !== -1;\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(unescape(encodeURIComponent(str)));\n    } else if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof window !== 'undefined' && typeof window.atob === 'function') {\n        return decodeURIComponent(escape(window.atob(str)));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    let chars = '0123456789abcdef';\n\n    let randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    let timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs<T>(args : Array<T>) : string {\n    try {\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\nexport function memoize<A, R, F : (...args : Array<A>) => R, X : { (...args : Array<A>) : R, displayName : string, reset : () => void }>(method : F, options : { time? : number, name? : string, thisNamespace? : boolean } = {}) : X {\n    let cacheMap = new WeakMap();\n\n    // $FlowFixMe\n    let memoizedFunction : X = function memoizedFunction(...args : Array<A>) : R {\n        let cache = cacheMap.getOrSet(options.thisNamespace ? this : method, () => ({}));\n\n        let key : string = serializeArgs(args);\n\n        let cacheTime = options.time;\n        if (cache[key] && cacheTime && (Date.now() - cache[key].time) < cacheTime) {\n            delete cache[key];\n        }\n\n        if (cache[key]) {\n            return cache[key].value;\n        }\n\n        let time  = Date.now();\n        let value = method.apply(this, arguments);\n\n        cache[key] = { time, value };\n\n        return cache[key].value;\n    };\n\n    memoizedFunction.reset = () => {\n        cacheMap.delete(options.thisNamespace ? this : method);\n    };\n\n    if (options.name) {\n        memoizedFunction.displayName = `${ options.name }:memoized`;\n    }\n\n    return memoizedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : Array<any>) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : Array<any>) : ZalgoPromise<R> {\n        let key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = ZalgoPromise.try(() => method.apply(this, arguments))\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return memoizedPromiseFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : Array<any>) => R, options : { name? : string } = {}) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return promisifiedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : Array<any>) => R, logic : (...args : Array<any>) => R, args : Array<any> = []) : R {\n    // $FlowFixMe\n    let cache = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    let key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n\n    let result = cache[key] = logic(...args);\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    return function onceFunction() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    let regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : mixed {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            let stack = err && err.stack;\n            let message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (err && err.toString && typeof err.toString === 'function') {\n            // $FlowFixMe\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) { // eslint-disable-line unicorn/catch-error-name\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    let defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && item.toString && typeof item.toString === 'function') {\n        // $FlowFixMe\n        return item.toString();\n    }\n\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    let index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    let original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : Array<T> {\n    let result = [];\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(obj[key]);\n        }\n    }\n    return result;\n}\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : Array<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : Array<number>) : number {\n    return Math.max(...args);\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : Array<T> {\n    let results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : Array<string> {\n    let result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    return function promiseDebouncedMethod() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        let localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n}\n\nexport function safeInterval(method : Function, time : number) : { cancel : () => void } {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n\n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, key.length - 2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        let parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            let isLast = (i + 1 === parts.length);\n            let isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (part === 'constructor' || part === 'prototype') {\n                throw new Error(`Disallowed key: ${ part }`);\n            }\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>\n};\n\nexport function eventEmitter() : EventEmitterType {\n    let triggered = {};\n    let handlers = {};\n\n    return {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            let handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            let listener = this.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            let handlerList = handlers[eventName];\n            let promises = [];\n\n            if (handlerList) {\n                for (let handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return this.trigger(eventName, ...args);\n        }\n    };\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    let pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    let interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | Array<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n\n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            let value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function arrayFrom<T>(item : Iterable<T>) : Array<T> { // eslint-disable-line no-undef\n    return Array.prototype.slice.call(item);\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    let constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    let prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : Array<mixed> | Object> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        let length = item.length;\n        let result : Array<mixed> = [];\n\n        for (let i = 0; i < length; i++) {\n\n\n            defineLazyProp(result, i, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                let el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        let result = {};\n\n        for (let key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                let el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        let descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {\n    text : string,\n    groups : Array<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    let result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    let index : number = result.index;\n    let regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : Array<RegexResultType> {\n\n    let matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : Array<mixed>) => T, time : number = 100) : (...args : Array<mixed>) => void {\n\n    let timeout;\n\n    return function debounceWrapper() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : Array<any>) => R) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            })\n        );\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => void,\n    all : () => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n\n    return {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                this.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) {\n            if (cleaned) {\n                method();\n            } else {\n                tasks.push(once(method));\n            }\n        },\n\n        all() : ZalgoPromise<void> {\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.pop();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n\n    // $FlowFixMe\n    return { result, error };\n}\n\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n\n    return thing;\n}\n\nexport function unique(arr : $ReadOnlyArray<string>) : $ReadOnlyArray<string> {\n    const result = {};\n    for (const item of arr) {\n        // eslint-disable-next-line const-immutable/no-mutation\n        result[item] = true;\n    }\n    return Object.keys(result);\n}\n","/* @flow */\n/* eslint max-lines: off */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval, uniqueID, arrayFrom } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function isDocumentReady() : boolean {\n    return Boolean(document.body) && document.readyState === 'complete';\n}\n\nexport function urlEncode(str : string) : string {\n    return str.replace(/\\?/g, '%3F').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\+/g, '%2B');\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\nexport function waitForDocumentReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForDocumentReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n\n            if (isDocumentReady()) {\n                return resolve();\n            }\n\n            let interval = setInterval(() => {\n                if (isDocumentReady()) {\n                    clearInterval(interval);\n                    return resolve();\n                }\n            }, 10);\n        });\n    });\n}\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return waitForDocumentReady().then(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        throw new Error('Document ready but document.body not present');\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        let params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function formatQuery(obj : { [ string ] : string } = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string';\n    }).map(key => {\n        return `${ urlEncode(key) }=${ urlEncode(obj[key]) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : { [ string ] : string } = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : { query? : { [string] : string }, hash? : { [string] : string } } = {}) : string {\n\n    let query = options.query || {};\n    let hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    let queryString = extendQuery(originalQuery, query);\n    let hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    let meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function enablePerformance() : boolean {\n    return inlineMemoize(enablePerformance, () : boolean => {\n        /* eslint-disable compat/compat */\n        return Boolean(\n            window.performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        );\n        /* eslint-enable compat/compat */\n    });\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n\n        if (!enablePerformance()) {\n            return;\n        }\n\n        let timing = window.performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined');\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : Array<HTMLElement> {\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : HTMLElement, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER) {\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path } : { host? : string, path : string }) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        let url = `${ host }${ path }`;\n        let scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        for (let script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            let src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                let value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                let result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : Array<{ country? : string, lang : string }> {\n    let nav = window.navigator;\n\n    let locales = nav.languages\n        ? Array.prototype.slice.apply(nav.languages)\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            let [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    let element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<window.HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        let interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                clearInterval(interval);\n                return resolve(el);\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\nexport function PopupOpenError(message : string) {\n    this.message = message;\n}\n\nPopupOpenError.prototype = Object.create(Error.prototype);\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    let { width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    options = {\n        top,\n        left,\n        width,\n        height,\n        status:     1,\n        toolbar:    0,\n        menubar:    0,\n        resizable:  1,\n        scrollbars: 1,\n        ...options\n    };\n\n    let name = options.name || '';\n    delete options.name;\n\n    // eslint-disable-next-line array-callback-return\n    let params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key]) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params, true);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        let err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    window.addEventListener('unload', () => win.close());\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    let tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    let documentElement = win.document.documentElement;\n\n    for (const child of arrayFrom(documentElement.children)) {\n        documentElement.removeChild(child);\n    }\n\n    for (const child of arrayFrom(el.children)) {\n        documentElement.appendChild(child);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        let promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = {}, container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    let element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (let key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\n\nexport type IframeElementOptionsType = {\n    style? : { [ string ] : string },\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n};\n\nexport function iframe(options : IframeElementOptionsType = {}, container : ?HTMLElement) : HTMLIFrameElement {\n\n    let attributes = options.attributes || {};\n    let style = options.style || {};\n\n    let frame = createElement('iframe', {\n        attributes: {\n            allowTransparency: 'true',\n            ...attributes\n        },\n        style: {\n            backgroundColor: 'transparent',\n            border:          'none',\n            ...style\n        },\n        html:  options.html,\n        class: options.class\n    });\n\n    const isIE = window.navigator.userAgent.match(/MSIE|Edge/i);\n    \n    if (!frame.hasAttribute('id')) {\n        frame.setAttribute('id', uniqueID());\n    }\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        let el = getElement(container);\n        el.appendChild(frame);\n    }\n\n    if (options.url || isIE) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : Array<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (let eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (let eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    let capitalizedName = capitalizeFirstLetter(name);\n\n    for (let prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let el = getElement(element);\n\n        if (!el) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        let startTimeout;\n        let endTimeout;\n        let startEvent;\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nconst STYLE = {\n\n    DISPLAY: {\n        NONE:  'none',\n        BLOCK: 'block'\n    },\n\n    VISIBILITY: {\n        VISIBLE: 'visible',\n        HIDDEN:  'hidden'\n    },\n\n    IMPORTANT: 'important'\n};\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', STYLE.VISIBILITY.HIDDEN, STYLE.IMPORTANT);\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', STYLE.DISPLAY.NONE, STYLE.IMPORTANT);\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    let animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let interval;\n\n    if (isElementClosed(element)) {\n        handler();\n    } else {\n        interval = safeInterval(() => {\n            if (isElementClosed(element)) {\n                interval.cancel();\n                handler();\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            if (interval) {\n                interval.cancel();\n            }\n        }\n    };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (let script of querySelectorAll('script', el)) {\n        let parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        let newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({ width : number, height : number }) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    let check = () => {\n        let newWidth = el.offsetWidth;\n        let newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        win.addEventListener('resize', check);\n    } else {\n        let loop = () => {\n            check();\n            timeout = setTimeout(loop, interval);\n        };\n        loop();\n    }\n\n    return {\n        cancel: () => {\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function getResourceLoadTime(url : string) : ?number {\n\n    if (!enablePerformance()) {\n        return;\n    }\n\n    if (!window.performance || typeof window.performance.getEntries !== 'function') {\n        return;\n    }\n\n    const entries = window.performance.getEntries();\n\n    for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n\n        if (entry && entry.name && entry.name.indexOf(url) === 0 && typeof entry.duration === 'number') {\n            return Math.floor(entry.duration);\n        }\n    }\n}\n","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n","/* @flow */\n\nexport function isPerc(str : string) : boolean {\n    return typeof str === 'string' && (/^[0-9]+%$/).test(str);\n}\n\nexport function isPx(str : string) : boolean {\n    return typeof str === 'string' && (/^[0-9]+px$/).test(str);\n}\n\nexport function toNum(val : string | number) : number {\n\n    if (typeof val === 'number') {\n        return val;\n    }\n\n    let match = val.match(/^([0-9]+)(px|%)$/);\n\n    if (!match) {\n        throw new Error(`Could not match css value from ${ val }`);\n    }\n\n    return parseInt(match[1], 10);\n}\n\nexport function toPx(val : number | string) : string {\n    return `${ toNum(val) }px`;\n}\n\nexport function toCSS(val : number | string) : string {\n\n    if (typeof val === 'number') {\n        return toPx(val);\n    }\n\n    return isPerc(val) ? val : toPx(val);\n}\n\nexport function percOf(num : number, perc : string) : number {\n    return parseInt(num * toNum(perc)  / 100, 10);\n}\n\nexport function normalizeDimension(dim : string | number, max : number) : number {\n    if (typeof dim === 'number') {\n        return dim;\n    } else if (isPerc(dim)) {\n        return percOf(max, dim);\n    } else if (isPx(dim)) {\n        return toNum(dim);\n    } else {\n        throw new Error(`Can not normalize dimension: ${ dim }`);\n    }\n}\n","/* @flow */\n\nexport const BRIDGE_TIMEOUT = 5000;\nexport const CHILD_WINDOW_TIMEOUT = 5000;\n\nexport const ACK_TIMEOUT = 2000;\nexport const ACK_TIMEOUT_KNOWN = 10000;\nexport const RES_TIMEOUT = __TEST__ ? 2000 : -1;\nexport const RESPONSE_CYCLE_TIME = 500;\n","/* @flow */\n\nexport const MESSAGE_TYPE = {\n    REQUEST:  ('postrobot_message_request' : 'postrobot_message_request'),\n    RESPONSE: ('postrobot_message_response' : 'postrobot_message_response'),\n    ACK:      ('postrobot_message_ack' : 'postrobot_message_ack')\n};\n\nexport const MESSAGE_ACK = {\n    SUCCESS: ('success' : 'success'),\n    ERROR:   ('error' : 'error')\n};\n\nexport const MESSAGE_NAME = {\n    METHOD:      ('postrobot_method' : 'postrobot_method'),\n    HELLO:       ('postrobot_hello' : 'postrobot_hello'),\n    OPEN_TUNNEL: ('postrobot_open_tunnel' : 'postrobot_open_tunnel')\n};\n\nexport const SEND_STRATEGY = {\n    POST_MESSAGE: ('postrobot_post_message' : 'postrobot_post_message'),\n    BRIDGE:       ('postrobot_bridge' : 'postrobot_bridge'),\n    GLOBAL:       ('postrobot_global' : 'postrobot_global')\n};\n\nexport const BRIDGE_NAME_PREFIX = '__postrobot_bridge__';\nexport const POSTROBOT_PROXY =    '__postrobot_proxy__';\n\nexport const WILDCARD = '*';\n\nexport const SERIALIZATION_TYPE = {\n    CROSS_DOMAIN_ZALGO_PROMISE: ('cross_domain_zalgo_promise' : 'cross_domain_zalgo_promise'),\n    CROSS_DOMAIN_FUNCTION:      ('cross_domain_function' : 'cross_domain_function'),\n    CROSS_DOMAIN_WINDOW:        ('cross_domain_window' : 'cross_domain_window')\n};\n","/* @flow */\n\nimport { type CrossDomainWindowType, type SameDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getOrSet } from 'belter/src';\n\nexport function getGlobal(win : SameDomainWindowType = window) : Object {\n    if (win !== window) {\n        return win[__POST_ROBOT__.__GLOBAL_KEY__];\n    }\n    const global : Object = win[__POST_ROBOT__.__GLOBAL_KEY__] = win[__POST_ROBOT__.__GLOBAL_KEY__] || {};\n    return global;\n}\n\nexport function deleteGlobal() {\n    delete window[__POST_ROBOT__.__GLOBAL_KEY__];\n}\n\ntype ObjectGetter = () => Object;\nconst getObj : ObjectGetter = () => ({});\n\ntype GetOrSet<T> = ((string, () => T) => T) & ((string, () => void) => void);\n\ntype GlobalStore<T> = {|\n    get : ((string, T) => T) & ((string, void) => T | void),\n    set : (string, T) => T,\n    has : (string) => boolean,\n    del : (string) => void,\n    getOrSet : GetOrSet<T>,\n    reset : () => void,\n    keys : () => $ReadOnlyArray<string>\n|};\n\n// $FlowFixMe\nexport function globalStore<T : mixed>(key? : string = 'store', defStore? : ObjectGetter = getObj) : GlobalStore<T> {\n    return getOrSet(getGlobal(), key, () => {\n        let store = defStore();\n\n        return {\n            has: (storeKey) => {\n                return store.hasOwnProperty(storeKey);\n            },\n            get: (storeKey, defVal) => {\n                // $FlowFixMe\n                return store.hasOwnProperty(storeKey) ? store[storeKey] : defVal;\n            },\n            set: (storeKey, val) => {\n                store[storeKey] = val;\n                return val;\n            },\n            del: (storeKey) => {\n                delete store[storeKey];\n            },\n            getOrSet: (storeKey, getter) => {\n                // $FlowFixMe\n                return getOrSet(store, storeKey, getter);\n            },\n            reset: () => {\n                store = defStore();\n            },\n            keys: () => {\n                return Object.keys(store);\n            }\n        };\n    });\n}\n\nexport class WildCard {}\n\nexport function getWildcard() : WildCard {\n    const global = getGlobal();\n    global.WINDOW_WILDCARD = global.WINDOW_WILDCARD || new WildCard();\n    return global.WINDOW_WILDCARD;\n}\n\ntype WindowStore<T> = {|\n    get : ((CrossDomainWindowType | WildCard, T) => T) & ((CrossDomainWindowType | WildCard, void) => T | void),\n    set : (CrossDomainWindowType | WildCard, T) => T,\n    has : (CrossDomainWindowType | WildCard) => boolean,\n    del : (CrossDomainWindowType | WildCard) => void,\n    getOrSet : (CrossDomainWindowType | WildCard, () => T) => T\n|};\n\n// $FlowFixMe\nexport function windowStore<T>(key? : string = 'store', defStore? : ObjectGetter = getObj) : WindowStore<T> {\n    return globalStore('windowStore').getOrSet(key, () => {\n        const winStore = new WeakMap();\n\n        const getStore = (win : CrossDomainWindowType | WildCard) : ObjectGetter => {\n            return winStore.getOrSet(win, defStore);\n        };\n    \n        return {\n            has: (win) => {\n                const store = getStore(win);\n                return store.hasOwnProperty(key);\n            },\n            get: (win, defVal) => {\n                const store = getStore(win);\n                // $FlowFixMe\n                return store.hasOwnProperty(key) ? store[key] : defVal;\n            },\n            set: (win, val) => {\n                const store = getStore(win);\n                store[key] = val;\n                return val;\n            },\n            del: (win) => {\n                const store = getStore(win);\n                delete store[key];\n            },\n            getOrSet: (win, getter) => {\n                const store = getStore(win);\n                return getOrSet(store, key, getter);\n            }\n        };\n    });\n}\n","/* @flow */\n\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nfunction getInstanceID() : string {\n    return globalStore('instance').getOrSet('instanceID', uniqueID);\n}\n\nfunction getHelloPromise(win : CrossDomainWindowType) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    const helloPromises = windowStore('helloPromises');\n    return helloPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nfunction listenForHello({ on } : { on : OnType }) : CancelableType {\n    return on(MESSAGE_NAME.HELLO, { domain: WILDCARD }, ({ source, origin }) => {\n        getHelloPromise(source).resolve({ win: source, domain: origin });\n        return { instanceID: getInstanceID() };\n    });\n}\n\nexport function sayHello(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string, instanceID : string }> {\n    return send(win, MESSAGE_NAME.HELLO, { instanceID: getInstanceID() }, { domain: WILDCARD, timeout: -1 })\n        .then(({ origin, data: { instanceID } }) => {\n            getHelloPromise(win).resolve({ win, domain: origin });\n            return { win, domain: origin, instanceID };\n        });\n}\n\nexport function getWindowInstanceID(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<string> {\n    return windowStore('windowInstanceIDPromises').getOrSet(win, () => {\n        return sayHello(win, { send }).then(({ instanceID }) => instanceID);\n    });\n}\n\nexport function initHello({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('helloListener', () => {\n        const listener = listenForHello({ on });\n\n        const parent = getAncestor();\n        if (parent) {\n            sayHello(parent, { send }).catch(noop);\n        }\n\n        return listener;\n    });\n}\n\nexport function awaitWindowHello(win : CrossDomainWindowType, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    let promise = getHelloPromise(win);\n\n    if (timeout !== -1) {\n        promise = promise.timeout(timeout, new Error(`${ name } did not load after ${ timeout }ms`));\n    }\n\n    return promise;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { windowStore } from '../global';\n\nexport function markWindowKnown(win : CrossDomainWindowType) {\n    const knownWindows = windowStore('knownWindows');\n    knownWindows.set(win, true);\n}\n\nexport function isWindowKnown(win : CrossDomainWindowType) : boolean {\n    const knownWindows = windowStore('knownWindows');\n    return knownWindows.get(win, false);\n}\n","/* @flow */\n\nexport const TYPE = {\n    FUNCTION:  ('function' : 'function'),\n    ERROR:     ('error' : 'error'),\n    PROMISE:   ('promise' : 'promise'),\n    REGEX:     ('regex' : 'regex'),\n    DATE:      ('date' : 'date'),\n    ARRAY:     ('array' : 'array'),\n    OBJECT:    ('object' : 'object'),\n    STRING:    ('string' : 'string'),\n    NUMBER:    ('number' : 'number'),\n    BOOLEAN:   ('boolean' : 'boolean'),\n    NULL:      ('null' : 'null'),\n    UNDEFINED: ('undefined' : 'undefined')\n};\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { CustomSerializedType } from './types';\n\nexport function isSerializedType(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null && typeof item.__type__ === 'string');\n}\n\nexport function determineType(val : mixed) : $Values<typeof TYPE> | void {\n    if (typeof val === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    if (val === null) {\n        return TYPE.NULL;\n    }\n\n    if (Array.isArray(val)) {\n        return TYPE.ARRAY;\n    }\n\n    if (typeof val === 'function') {\n        return TYPE.FUNCTION;\n    }\n\n    if (typeof val === 'object') {\n\n        if (val instanceof Error) {\n            return TYPE.ERROR;\n        }\n\n        if (typeof val.then === 'function') {\n            return TYPE.PROMISE;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object RegExp]') {\n            return TYPE.REGEX;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object Date]') {\n            return TYPE.DATE;\n        }\n\n        return TYPE.OBJECT;\n    }\n\n    if (typeof val === 'string') {\n        return TYPE.STRING;\n    }\n\n    if (typeof val === 'number') {\n        return TYPE.NUMBER;\n    }\n\n    if (typeof val === 'boolean') {\n        return TYPE.BOOLEAN;\n    }\n}\n\nexport function serializeType<T : string, V : mixed>(type : T, val : V) : CustomSerializedType<T, V> {\n    return {\n        __type__: type,\n        __val__:  val\n    };\n}\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { Thenable, CustomSerializedType, NativeSerializedType } from './types';\nimport { determineType, isSerializedType } from './common';\nimport {\n    serializeFunction,\n    serializeError, type SerializedError,\n    serializePromise,\n    serializeRegex, type SerializedRegex,\n    serializeDate, type SerializedDate,\n    serializeArray,\n    serializeObject,\n    serializeString,\n    serializeNumber,\n    serializeBoolean,\n    serializeNull\n} from './serializers';\n\ntype NativeSerializer<V : mixed, S : mixed, T : $Values<typeof TYPE>> = (value : V, key : string) => NativeSerializedType<T, S>;\ntype CustomSerializer<V : mixed, S : mixed, T : string> = (value : V, key : string) => CustomSerializedType<T, S>;\ntype PrimitiveSerializer<V : mixed, S : mixed> = (value : V, key : string) => S;\ntype CustomOrPrimitiveSerializer<V : mixed, T : string> = CustomSerializer<V, *, T> | PrimitiveSerializer<V, *>;\ntype NativeOrCustomOrPrimitiveSerializer<V : mixed, S : mixed, T : string> = NativeSerializer<V, S, T> | CustomOrPrimitiveSerializer<V, T>;\n\ntype Serializers = {|\n    function? : CustomOrPrimitiveSerializer<Function, typeof TYPE.FUNCTION>,\n    error? : NativeOrCustomOrPrimitiveSerializer<Error, SerializedError, typeof TYPE.ERROR>,\n    promise? : CustomOrPrimitiveSerializer<Thenable, typeof TYPE.PROMISE>,\n    regex? : NativeOrCustomOrPrimitiveSerializer<RegExp, SerializedRegex, typeof TYPE.REGEX>,\n    date? : NativeOrCustomOrPrimitiveSerializer<Date, SerializedDate, typeof TYPE.DATE>,\n    array? : CustomOrPrimitiveSerializer<$ReadOnlyArray<mixed>, typeof TYPE.ARRAY>,\n    object? : CustomOrPrimitiveSerializer<Object, typeof TYPE.OBJECT>,\n    string? : CustomOrPrimitiveSerializer<string, typeof TYPE.STRING>,\n    number? : CustomOrPrimitiveSerializer<number, typeof TYPE.NUMBER>,\n    boolean? : CustomOrPrimitiveSerializer<boolean, typeof TYPE.BOOLEAN>,\n    null? : CustomOrPrimitiveSerializer<null, typeof TYPE.NULL>\n|};\n\nconst SERIALIZER : Serializers = {\n    [ TYPE.FUNCTION ]:  serializeFunction,\n    [ TYPE.ERROR ]:     serializeError,\n    [ TYPE.PROMISE ]:   serializePromise,\n    [ TYPE.REGEX ]:     serializeRegex,\n    [ TYPE.DATE ]:      serializeDate,\n    [ TYPE.ARRAY ]:     serializeArray,\n    [ TYPE.OBJECT ]:    serializeObject,\n    [ TYPE.STRING ]:    serializeString,\n    [ TYPE.NUMBER ]:    serializeNumber,\n    [ TYPE.BOOLEAN ]:   serializeBoolean,\n    [ TYPE.NULL ]:      serializeNull\n};\n\n// $FlowFixMe\nconst defaultSerializers : Serializers = {};\n\nexport function serialize<T : mixed>(obj : T, serializers : Serializers = defaultSerializers) : string {\n\n    function replacer(key) : ?mixed {\n        const val = this[key];\n\n        if (isSerializedType(this)) {\n            return val;\n        }\n        \n        const type = determineType(val);\n\n        if (!type) {\n            return val;\n        }\n\n        // $FlowFixMe\n        const serializer = serializers[type] || SERIALIZER[type];\n\n        if (!serializer) {\n            return val;\n        }\n\n        return serializer(val, key);\n    }\n\n    const result = JSON.stringify(obj, replacer);\n\n    if (typeof result === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    return result;\n}\n","/* @flow */\n\nexport type SerializedFunction = void;\n\nexport function serializeFunction() : SerializedFunction {\n    // pass\n}\n\nexport function deserializeFunction() {\n    throw new Error(`Function serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedError = {|\n    message : string,\n    stack : string,\n    code : string | number | void\n|};\n\n// $FlowFixMe\nexport function serializeError({ message, stack, code } : Error) : NativeSerializedType<typeof TYPE.ERROR, SerializedError> {\n    return serializeType(TYPE.ERROR, { message, stack, code });\n}\n\nexport function deserializeError({ message, stack, code } : SerializedError) : Error {\n    const error = new Error(message);\n    // $FlowFixMe\n    error.code = code;\n    error.stack = `${ stack }\\n\\n${ error.stack }`;\n    return error;\n}\n","/* @flow */\n\nexport type SerializedPromise = void;\n\nexport function serializePromise() : SerializedPromise {\n    // pass\n}\n\nexport function deserializePromise() {\n    throw new Error(`Promise serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedRegex = string;\n\nexport function serializeRegex(val : RegExp) : NativeSerializedType<typeof TYPE.REGEX, SerializedRegex> {\n    return serializeType(TYPE.REGEX, val.source);\n}\n\nexport function deserializeRegex(val : string) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(val);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedDate = string;\n\nexport function serializeDate(val : Date) : NativeSerializedType<typeof TYPE.DATE, SerializedDate> {\n    return serializeType(TYPE.DATE, val.toJSON());\n}\n\nexport function deserializeDate(val : string) : Date {\n    return new Date(val);\n}\n","/* @flow */\n\nexport type SerializedArray<T : mixed = mixed> = $ReadOnlyArray<T>;\n\nexport function serializeArray<T : mixed>(val : $ReadOnlyArray<T>) : SerializedArray<T> {\n    return val;\n}\n\nexport function deserializeArray<T : mixed>(val : SerializedArray<T>) : $ReadOnlyArray<T> {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedObject = Object;\n\nexport function serializeObject(val : Object) : SerializedObject {\n    return val;\n}\n\nexport function deserializeObject(val : SerializedObject) : Object {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedString = string;\n\nexport function serializeString(val : string) : SerializedString {\n    return val;\n}\n\nexport function deserializeString(val : SerializedString) : string {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNumber = number;\n\nexport function serializeNumber(val : number) : SerializedNumber {\n    return val;\n}\n\nexport function deserializeNumber(val : SerializedNumber) : number {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedBoolean = boolean;\n\nexport function serializeBoolean(val : boolean) : SerializedBoolean {\n    return val;\n}\n\nexport function deserializeBoolean(val : SerializedBoolean) : boolean {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNull = null;\n\nexport function serializeNull(val : null) : SerializedNull {\n    return val;\n}\n\nexport function deserializeNull(val : SerializedNull) : null {\n    return val;\n}\n","/* @flow */\n\nimport type { Thenable } from './types';\nimport { TYPE } from './constants';\nimport { determineType, isSerializedType } from './common';\nimport {\n    deserializeFunction,\n    deserializeError, type SerializedError,\n    deserializePromise,\n    deserializeRegex, type SerializedRegex,\n    deserializeDate, type SerializedDate,\n    deserializeArray,\n    deserializeObject,\n    deserializeString,\n    deserializeNumber,\n    deserializeBoolean,\n    deserializeNull\n} from './serializers';\n\ntype Deserializer<V : mixed, S : mixed> = (serializedValue : S, key : string) => V;\ntype PrimitiveDeserializer<V, S = V> = (serializedValue : S, key : string) => V;\n\ntype Deserializers = {\n    function? : Deserializer<Function, *>,\n    error? : Deserializer<Error, SerializedError>,\n    promise? : Deserializer<Thenable, *>,\n    regex? : Deserializer<RegExp, SerializedRegex>,\n    date? : Deserializer<Date, SerializedDate>,\n    array? : PrimitiveDeserializer<$ReadOnlyArray<mixed>>,\n    object? : PrimitiveDeserializer<Object>,\n    string? : PrimitiveDeserializer<string>,\n    number? : PrimitiveDeserializer<number>,\n    boolean? : PrimitiveDeserializer<boolean>,\n    null? : PrimitiveDeserializer<null>,\n    [string] : Deserializer<mixed, *>\n};\n\n// $FlowFixMe\nconst DESERIALIZER : Deserializers = {\n    [ TYPE.FUNCTION ]:  deserializeFunction,\n    [ TYPE.ERROR ]:     deserializeError,\n    [ TYPE.PROMISE ]:   deserializePromise,\n    [ TYPE.REGEX ]:     deserializeRegex,\n    [ TYPE.DATE ]:      deserializeDate,\n    [ TYPE.ARRAY ]:     deserializeArray,\n    [ TYPE.OBJECT ]:    deserializeObject,\n    [ TYPE.STRING ]:    deserializeString,\n    [ TYPE.NUMBER ]:    deserializeNumber,\n    [ TYPE.BOOLEAN ]:   deserializeBoolean,\n    [ TYPE.NULL ]:      deserializeNull\n};\n\n// $FlowFixMe\nconst defaultDeserializers : Deserializers = {};\n\nexport function deserialize<T : mixed | null | void>(str : string, deserializers : Deserializers = defaultDeserializers) : T {\n    if (str === TYPE.UNDEFINED) {\n        // $FlowFixMe\n        return;\n    }\n\n    function replacer(key, val) : ?mixed {\n        if (isSerializedType(this)) {\n            return val;\n        }\n\n        let type;\n        let value;\n\n        if (isSerializedType(val)) {\n            type = val.__type__;\n            value = val.__val__;\n        } else {\n            type = determineType(val);\n            value = val;\n        }\n\n        if (!type) {\n            return value;\n        }\n\n        // $FlowFixMe\n        const deserializer = deserializers[type] || DESERIALIZER[type];\n\n        if (!deserializer) {\n            return value;\n        }\n\n        return deserializer(value, key);\n    }\n\n    return JSON.parse(str, replacer);\n}\n","/* @flow */\n\nimport { isSameDomain, isWindowClosed, type CrossDomainWindowType, closeWindow,\n    type DomainMatcher, getOpener, WINDOW_TYPE, isWindow, assertSameDomain } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, memoizePromise } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport { getWindowInstanceID } from '../lib';\nimport { linkWindow } from '../bridge';\nimport type { OnType, SendType } from '../types';\n\nfunction cleanupProxyWindows() {\n    const idToProxyWindow = globalStore('idToProxyWindow');\n    for (const id of idToProxyWindow.keys()) {\n        // $FlowFixMe\n        if (idToProxyWindow.get(id).shouldClean()) {\n            idToProxyWindow.del(id);\n        }\n    }\n}\n\ntype SerializedProxyWindow = {|\n    id : string,\n    type : $Values<typeof WINDOW_TYPE>,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    isClosed : () => ZalgoPromise<boolean>,\n    setLocation : (string) => ZalgoPromise<void>,\n    getName : () => ZalgoPromise<?string>,\n    setName : (string) => ZalgoPromise<void>,\n    getInstanceID : () => ZalgoPromise<string>\n|};\n\nfunction getSerializedWindow(id : string, win : CrossDomainWindowType, { send } : { send : SendType }) : SerializedProxyWindow {\n    let windowName;\n    \n    return {\n        id,\n        type:          getOpener(win) ? WINDOW_TYPE.POPUP : WINDOW_TYPE.IFRAME,\n        getInstanceID: memoizePromise(() => getWindowInstanceID(win, { send })),\n        close:         () => ZalgoPromise.try(() => {\n            closeWindow(win);\n        }),\n        getName: () => ZalgoPromise.try(() => {\n            if (isWindowClosed(win)) {\n                return;\n            }\n\n            return windowName;\n        }),\n        focus:   () => ZalgoPromise.try(() => {\n            win.focus();\n        }),\n        isClosed: () => ZalgoPromise.try(() => {\n            return isWindowClosed(win);\n        }),\n        setLocation: (href) => ZalgoPromise.try(() => {\n            if (isSameDomain(win)) {\n                try {\n                    if (win.location && typeof win.location.replace === 'function') {\n                        // $FlowFixMe\n                        win.location.replace(href);\n                        return;\n                    }\n                } catch (err) {\n                    // pass\n                }\n            }\n\n            win.location = href;\n        }),\n        setName: (name) => ZalgoPromise.try(() => {\n            if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                linkWindow({ win, name });\n            }\n\n            win = assertSameDomain(win);\n\n            win.name = name;\n\n            if (win.frameElement) {\n                win.frameElement.setAttribute('name', name);\n            }\n\n            windowName = name;\n        })\n    };\n}\n\nexport class ProxyWindow {\n\n    isProxyWindow : true = true\n    serializedWindow : SerializedProxyWindow\n    actualWindow : CrossDomainWindowType\n    actualWindowPromise : ZalgoPromise<CrossDomainWindowType>\n    send : SendType\n    name : string\n\n    constructor(serializedWindow : SerializedProxyWindow, actualWindow? : ?CrossDomainWindowType, { send } : { send : SendType }) {\n        this.serializedWindow = serializedWindow;\n        this.actualWindowPromise = new ZalgoPromise();\n        this.send = send;\n        if (actualWindow) {\n            this.setWindow(actualWindow);\n        }\n    }\n\n    getType() : $Values<typeof WINDOW_TYPE> {\n        return this.serializedWindow.type;\n    }\n\n    isPopup() : boolean {\n        return this.getType() === WINDOW_TYPE.POPUP;\n    }\n\n    isIframe() : boolean {\n        return this.getType() === WINDOW_TYPE.IFRAME;\n    }\n\n    setLocation(href : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setLocation(href).then(() => this);\n    }\n\n    setName(name : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setName(name).then(() => this);\n    }\n\n    close() : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.close().then(() => this);\n    }\n\n    focus() : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            return ZalgoPromise.all([\n                this.isPopup() && this.serializedWindow.getName().then(name => {\n                    if (name) {\n                        window.open('', name);\n                    }\n                }),\n                this.serializedWindow.focus()\n            ]);\n        }).then(() => this);\n    }\n\n    isClosed() : ZalgoPromise<boolean> {\n        return this.serializedWindow.isClosed();\n    }\n\n    getWindow() : ?CrossDomainWindowType {\n        return this.actualWindow;\n    }\n\n    setWindow(win : CrossDomainWindowType) {\n        this.actualWindow = win;\n        this.serializedWindow = getSerializedWindow(this.serializedWindow.id, win, { send: this.send });\n        this.actualWindowPromise.resolve(win);\n    }\n\n    awaitWindow() : ZalgoPromise<CrossDomainWindowType> {\n        return this.actualWindowPromise;\n    }\n\n    matchWindow(win : CrossDomainWindowType) : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return win === this.actualWindow;\n            }\n            \n            return ZalgoPromise.hash({\n                proxyInstanceID:       this.getInstanceID(),\n                knownWindowInstanceID: getWindowInstanceID(win, { send: this.send })\n            }).then(({ proxyInstanceID, knownWindowInstanceID }) => {\n                const match = proxyInstanceID === knownWindowInstanceID;\n\n                if (match) {\n                    this.setWindow(win);\n                }\n\n                return match;\n            });\n        });\n    }\n\n    unwrap() : CrossDomainWindowType | ProxyWindow {\n        return this.actualWindow || this;\n    }\n\n    getInstanceID() : ZalgoPromise<string> {\n        return this.serializedWindow.getInstanceID();\n    }\n\n    serialize() : SerializedProxyWindow {\n        return this.serializedWindow;\n    }\n\n    shouldClean() : boolean {\n        return this.actualWindow && isWindowClosed(this.actualWindow);\n    }\n\n    static unwrap(win : CrossDomainWindowType | ProxyWindow) : CrossDomainWindowType | ProxyWindow {\n        return ProxyWindow.isProxyWindow(win)\n            // $FlowFixMe\n            ? win.unwrap()\n            : win;\n    }\n\n    static serialize(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : SerializedProxyWindow {\n        cleanupProxyWindows();\n\n        return ProxyWindow.toProxyWindow(win, { send }).serialize();\n    }\n\n    static deserialize(serializedWindow : SerializedProxyWindow, { on, send } : { on : OnType, send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n        \n        return globalStore('idToProxyWindow').getOrSet(serializedWindow.id, () => {\n            return new ProxyWindow(serializedWindow, null, { on, send });\n        });\n    }\n\n    static isProxyWindow(obj : CrossDomainWindowType | ProxyWindow) : boolean {\n        // $FlowFixMe\n        return Boolean(obj && !isWindow(obj) && obj.isProxyWindow);\n    }\n\n    static toProxyWindow(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n\n        if (ProxyWindow.isProxyWindow(win)) {\n            // $FlowFixMe\n            return win;\n        }\n\n        // $FlowFixMe\n        const realWin : CrossDomainWindowType = win;\n\n        // $FlowFixMe\n        return windowStore('winToProxyWindow').getOrSet(win, () => {\n            const id = uniqueID();\n            const serializedWindow = getSerializedWindow(id, realWin, { send });\n            const proxyWindow = new ProxyWindow(serializedWindow, realWin, { send });\n\n            return globalStore('idToProxyWindow').set(id, proxyWindow);\n        });\n    }\n}\n\nexport type SerializedWindow = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, SerializedProxyWindow>;\n\nexport function serializeWindow(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, win : CrossDomainWindowType, { send } : { send : SendType }) : SerializedWindow {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, ProxyWindow.serialize(win, { send }));\n}\n\nexport function deserializeWindow(source : CrossDomainWindowType | ProxyWindow, origin : string, win : SerializedProxyWindow, { on, send } : { on : OnType, send : SendType }) : ProxyWindow {\n    return ProxyWindow.deserialize(win, { on, send });\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isSameDomain, isOpener, isSameTopWindow, matchDomain, getUserAgent, getDomainFromUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { BRIDGE_NAME_PREFIX } from '../conf';\nimport { windowStore } from '../global';\n\nexport function needsBridgeForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForWin(win : CrossDomainWindowType) : boolean {\n\n    if (!isSameTopWindow(window, win)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForDomain(domain : ?string, win : ?CrossDomainWindowType) : boolean {\n\n    if (domain) {\n        if (getDomain() !== getDomainFromUrl(domain)) {\n            return true;\n        }\n    } else if (win) {\n        if (!isSameDomain(win))  {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function needsBridge({ win, domain } : { win? : CrossDomainWindowType, domain? : string }) : boolean {\n\n    if (!needsBridgeForBrowser()) {\n        return false;\n    }\n\n    if (domain && !needsBridgeForDomain(domain, win)) {\n        return false;\n    }\n\n    if (win && !needsBridgeForWin(win)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getBridgeName(domain : string) : string {\n\n    domain = domain || getDomainFromUrl(domain);\n\n    const sanitizedDomain = domain.replace(/[^a-zA-Z0-9]+/g, '_');\n\n    const id = `${ BRIDGE_NAME_PREFIX }_${ sanitizedDomain }`;\n\n    return id;\n}\n\nexport function isBridge() : boolean {\n    return Boolean(window.name && window.name === getBridgeName(getDomain()));\n}\n\nexport const documentBodyReady = new ZalgoPromise(resolve => {\n\n    if (window.document && window.document.body) {\n        return resolve(window.document.body);\n    }\n\n    const interval = setInterval(() => {\n        if (window.document && window.document.body) {\n            clearInterval(interval);\n            return resolve(window.document.body);\n        }\n    }, 10);\n});\n\nexport function registerRemoteWindow(win : CrossDomainWindowType) {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    remoteWindowPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nexport function findRemoteWindow(win : CrossDomainWindowType) : ZalgoPromise<(remoteWin : CrossDomainWindowType, message : string, remoteDomain : string) => void> {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    const remoteWinPromise = remoteWindowPromises.get(win);\n\n    if (!remoteWinPromise) {\n        throw new Error(`Remote window promise not found`);\n    }\n\n    return remoteWinPromise;\n}\n\ntype SendMessageType = {|\n    (string) : void,\n    fireAndForget : (string) => void\n|};\n\nexport function registerRemoteSendMessage(win : CrossDomainWindowType, domain : string, sendMessage : SendMessageType) {\n    const sendMessageWrapper = (remoteWin : CrossDomainWindowType, remoteDomain : string, message : string) => {\n        if (remoteWin !== win) {\n            throw new Error(`Remote window does not match window`);\n        }\n\n        if (!matchDomain(remoteDomain, domain)) {\n            throw new Error(`Remote domain ${ remoteDomain } does not match domain ${ domain }`);\n        }\n\n        sendMessage.fireAndForget(message);\n    };\n\n    findRemoteWindow(win).resolve(sendMessageWrapper);\n}\n\nexport function rejectRemoteSendMessage(win : CrossDomainWindowType, err : Error) {\n    findRemoteWindow(win).reject(err).catch(noop);\n}\n\nexport function sendBridgeMessage(win : CrossDomainWindowType, domain : string, message : string) : ZalgoPromise<void> {\n\n    const messagingChild  = isOpener(window, win);\n    const messagingParent = isOpener(win, window);\n\n    if (!messagingChild && !messagingParent) {\n        throw new Error(`Can only send messages to and from parent and popup windows`);\n    }\n\n    return findRemoteWindow(win).then(sendMessage => {\n        return sendMessage(win, domain, message);\n    });\n}\n","/* @flow */\n\nimport { matchDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, isRegex } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { MESSAGE_NAME, WILDCARD, SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nimport { ProxyWindow } from './window';\n\ntype StoredMethod = {|\n    name : string,\n    domain : DomainMatcher,\n    val : Function,\n    source : CrossDomainWindowType | ProxyWindow\n|};\n\nfunction addMethod(id : string, val : Function, name : string, source : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher) {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    \n    if (ProxyWindow.isProxyWindow(source)) {\n        proxyWindowMethods.set(id, { val, name, domain, source });\n    } else {\n        proxyWindowMethods.del(id);\n        // $FlowFixMe\n        const methods = methodStore.getOrSet(source, () => ({}));\n        methods[id] = { domain, name, val, source };\n    }\n}\n\nfunction lookupMethod(source : CrossDomainWindowType, id : string) : ?StoredMethod {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    const methods = methodStore.getOrSet(source, () => ({}));\n    return methods[id] || proxyWindowMethods.get(id);\n}\n\nfunction listenForFunctionCalls({ on } : { on : OnType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('functionCalls', () => {\n        return on(MESSAGE_NAME.METHOD, { domain: WILDCARD }, ({ source, origin, data } : { source : CrossDomainWindowType, origin : string, data : Object }) => {\n            const { id, name } = data;\n\n            const meth = lookupMethod(source, id);\n    \n            if (!meth) {\n                throw new Error(`Could not find method '${ data.name }' with id: ${ data.id } in ${ getDomain(window) }`);\n            }\n\n            const { source: methodSource, domain, val } = meth;\n            \n            return ZalgoPromise.try(() => {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Method '${ data.name }' domain ${ JSON.stringify(isRegex(meth.domain) ? meth.domain.source : meth.domain) } does not match origin ${ origin } in ${ getDomain(window) }`);\n                }\n                \n                if (ProxyWindow.isProxyWindow(methodSource)) {\n                    // $FlowFixMe\n                    return methodSource.matchWindow(source).then(match => {\n                        if (!match) {\n                            throw new Error(`Method call '${ data.name }' failed - proxy window does not match source in ${ getDomain(window) }`);\n                        }\n                    });\n                }\n            }).then(() => {\n                return val.apply({ source, origin }, data.args);\n            }, err => {\n                return ZalgoPromise.try(() => {\n                    if (val.onError) {\n                        return val.onError(err);\n                    }\n                }).then(() => {\n                    // $FlowFixMe\n                    if (err.stack) {\n                        // $FlowFixMe\n                        err.stack = `Remote call to ${ name }()\\n\\n${ err.stack }`;\n                    }\n\n                    throw err;\n                });\n            }).then(result => {\n                return { result, id, name };\n            });\n        });\n    });\n}\n\nexport type SerializedFunction = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, {\n    id : string,\n    name : string\n}>;\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype SerializableFunction<T> = {\n    () : ZalgoPromise<T> | T,\n    __id__? : string,\n    __name__? : string\n};\n\nexport function serializeFunction<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : SerializableFunction<T>, key : string, { on } : { on : OnType }) : SerializedFunction {\n    listenForFunctionCalls({ on });\n    \n    const id = val.__id__ || uniqueID();\n    destination = ProxyWindow.unwrap(destination);\n    const name = val.__name__ || val.name || key;\n\n    if (ProxyWindow.isProxyWindow(destination)) {\n        addMethod(id, val, name, destination, domain);\n\n        // $FlowFixMe\n        destination.awaitWindow().then(win => {\n            addMethod(id, val, name, win, domain);\n        });\n    } else {\n        addMethod(id, val, name, destination, domain);\n    }\n\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, { id, name });\n}\n\nexport function deserializeFunction<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { id, name } : { id : string, name : string }, { send } : { send : SendType }) : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<T> {\n    const getDeserializedFunction = (opts? : Object = {}) => {\n        function crossDomainFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n            let originalStack;\n    \n            if (__DEBUG__) {\n                originalStack = (new Error(`Original call to ${ name }():`)).stack;\n            }\n    \n            return ProxyWindow.toProxyWindow(source, { send }).awaitWindow().then(win => {\n                const meth = lookupMethod(win, id);\n    \n                if (meth && meth.val !== crossDomainFunctionWrapper) {\n                    return meth.val.apply({ source: window, origin: getDomain() }, arguments);\n                } else {\n                    // $FlowFixMe\n                    const options = { domain: origin, fireAndForget: opts.fireAndForget };\n                    const args = Array.prototype.slice.call(arguments);\n\n                    return send(win, MESSAGE_NAME.METHOD, { id, name, args }, options)\n                        .then(res => {\n                            if (!opts.fireAndForget) {\n                                return res.data.result;\n                            }\n                        });\n                }\n    \n            }).catch(err => {\n                // $FlowFixMe\n                if (__DEBUG__ && originalStack && err.stack) {\n                    // $FlowFixMe\n                    err.stack = `${ err.stack }\\n\\n${ originalStack }`;\n                }\n                throw err;\n            });\n        }\n\n        crossDomainFunctionWrapper.__name__ = name;\n        crossDomainFunctionWrapper.__origin__ = origin;\n        crossDomainFunctionWrapper.__source__ = source;\n        crossDomainFunctionWrapper.__id__ = id;\n\n        crossDomainFunctionWrapper.origin = origin;\n\n        return crossDomainFunctionWrapper;\n    };\n\n    const crossDomainFunctionWrapper = getDeserializedFunction();\n    crossDomainFunctionWrapper.fireAndForget = getDeserializedFunction({ fireAndForget: true });\n\n    return crossDomainFunctionWrapper;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindow, type DomainMatcher } from 'cross-domain-utils/src';\nimport { TYPE, serialize, deserialize, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, deserializeFunction, type SerializedFunction } from './function';\nimport { serializePromise, deserializePromise, type SerializedPromise } from './promise';\nimport { serializeWindow, deserializeWindow, type SerializedWindow, ProxyWindow } from './window';\n\nexport function serializeMessage<T : mixed>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T, { on, send } : { on : OnType, send : SendType }) : string {\n    return serialize(obj, {\n        [ TYPE.PROMISE ]:  (val : Thenable, key : string) : SerializedPromise => serializePromise(destination, domain, val, key, { on, send }),\n        [ TYPE.FUNCTION ]: (val : Function, key : string) : SerializedFunction => serializeFunction(destination, domain, val, key, { on, send }),\n        [ TYPE.OBJECT ]:   (val : CrossDomainWindowType) : Object | SerializedWindow => {\n            return (isWindow(val) || ProxyWindow.isProxyWindow(val)) ? serializeWindow(destination, domain, val, { on, send }) : val;\n        }\n    });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string, { on, send } : { on : OnType, send : SendType }) : T {\n    return deserialize(message, {\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE ]: (serializedPromise)  => deserializePromise(source, origin, serializedPromise),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION ]:      (serializedFunction) => deserializeFunction(source, origin, serializedFunction, { on, send }),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW ]:        (serializedWindow)   => deserializeWindow(source, origin, serializedWindow, { on, send })\n    });\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { serializeType, type CustomSerializedType, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, type SerializedFunction } from './function';\nimport { ProxyWindow } from './window';\n\nexport type SerializedPromise = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n    then : SerializedFunction\n}>;\n\nexport function serializePromise(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : Thenable, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedPromise {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n        then: serializeFunction(destination, domain, (resolve, reject) => val.then(resolve, reject), key, { on, send })\n    });\n}\n\nexport function deserializePromise<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { then } : { then : Function }) : ZalgoPromise<T> {\n    return new ZalgoPromise(then);\n}\n","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain,\n    getDomain, type CrossDomainWindowType, type DomainMatcher, PROTOCOL } from 'cross-domain-utils/src';\n\nimport { SEND_STRATEGY, WILDCARD } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\nimport { getGlobal } from '../../global';\nimport { sendBridgeMessage, needsBridgeForBrowser, isBridge } from '../../bridge';\n\nexport const SEND_MESSAGE_STRATEGIES = {};\n\nSEND_MESSAGE_STRATEGIES[SEND_STRATEGY.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : DomainMatcher) => {\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(window, win) === false) {\n            return;\n        }\n    }\n\n    let domains;\n\n    if (Array.isArray(domain)) {\n        domains = domain;\n    } else if (typeof domain === 'string') {\n        domains = [ domain ];\n    } else {\n        domains = [ WILDCARD ];\n    }\n\n    domains = domains.map(dom => {\n\n        if (__TEST__) {\n            if (dom.indexOf(PROTOCOL.MOCK) === 0) {\n                if (window.location.protocol === PROTOCOL.FILE) {\n                    return WILDCARD;\n                }\n\n                if (!isActuallySameDomain(win)) {\n                    throw new Error(`Attempting to send messsage to mock domain ${ dom }, but window is actually cross-domain`);\n                }\n\n                // $FlowFixMe\n                return getActualDomain(win);\n\n            }\n        }\n        \n        if (dom.indexOf(PROTOCOL.FILE) === 0) {\n            return WILDCARD;\n        }\n\n        return dom;\n    });\n\n    domains.forEach(dom => {\n        win.postMessage(serializedMessage, dom);\n    });\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            return;\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        sendBridgeMessage(win, domain, serializedMessage);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            return;\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        const foreignGlobal = getGlobal(win);\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n","/* @flow */\n\nimport { isWindowClosed, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, stringifyError } from 'belter/src';\n\nimport { serializeMessage } from '../../serialize';\nimport type { Message } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\nexport function sendMessage(win : CrossDomainWindowType, domain : DomainMatcher, message : Message, { on, send } : { on : OnType, send : SendType }) {\n    if (isWindowClosed(win)) {\n        throw new Error('Window is closed');\n    }\n    \n    const serializedMessage = serializeMessage(win, domain, {\n        [ __POST_ROBOT__.__GLOBAL_KEY__ ]: {\n            id:     uniqueID(),\n            origin: getDomain(window),\n            ...message\n        }\n    }, { on, send });\n\n    const strategies = Object.keys(SEND_MESSAGE_STRATEGIES);\n    const errors = [];\n\n    for (const strategyName of strategies) {\n        try {\n            SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n        } catch (err) {\n            errors.push(err);\n        }\n    }\n\n    if (errors.length === strategies.length) {\n        throw new Error(`All post-robot messaging strategies failed:\\n\\n${ errors.map(stringifyError).join('\\n\\n') }`);\n    }\n}\n","/* @flow */\n\nimport { getUserAgent } from 'cross-domain-utils/src';\n\nexport function needsGlobalMessagingForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|rv:11|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { isRegex, getOrSet } from 'belter/src';\n\nimport { getWildcard, type WildCard, globalStore, windowStore } from '../global';\nimport { WILDCARD } from '../conf';\n\nexport function resetListeners() {\n    const responseListeners = globalStore('responseListeners');\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    responseListeners.reset();\n    erroredResponseListeners.reset();\n}\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {|\n    handler : ({ source : CrossDomainWindowType, origin : string, data : mixed }) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void,\n    window : ?CrossDomainWindowType,\n    name : string,\n    domain : DomainMatcher\n|};\n\nexport type ResponseListenerType = {|\n    name : string,\n    win : CrossDomainWindowType,\n    domain : DomainMatcher,\n    promise : ZalgoPromise<*>,\n    ack? : ?boolean,\n    cancelled? : ?boolean\n|};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.set(hash, listener);\n}\n\nexport function getResponseListener(hash : string) : ?ResponseListenerType {\n    const responseListeners = globalStore('responseListeners');\n    return responseListeners.get(hash);\n}\n\nexport function deleteResponseListener(hash : string) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.del(hash);\n}\n\nexport function cancelResponseListeners() {\n    const responseListeners = globalStore('responseListeners');\n    for (const hash of responseListeners.keys()) {\n        const listener = responseListeners.get(hash);\n        if (listener) {\n            listener.cancelled = true;\n        }\n        responseListeners.del(hash);\n    }\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    erroredResponseListeners.set(hash, true);\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    return erroredResponseListeners.has(hash);\n}\n\nexport function getRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?(string | RegExp) }) : ?RequestListenerType {\n    const requestListeners = windowStore('requestListeners');\n\n    if (win === WILDCARD) {\n        win = null;\n    }\n\n    if (domain === WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    for (const winQualifier of [ win, getWildcard() ]) {\n        if (!winQualifier) {\n            continue;\n        }\n\n        const nameListeners = requestListeners.get(winQualifier);\n\n        if (!nameListeners) {\n            continue;\n        }\n\n        const domainListeners = nameListeners[name];\n\n        if (!domainListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (domainListeners[domain]) {\n                return domainListeners[domain];\n            }\n\n            if (domainListeners[__DOMAIN_REGEX__]) {\n                for (const { regex, listener } of domainListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (domainListeners[WILDCARD]) {\n            return domainListeners[WILDCARD];\n        }\n    }\n}\n\nexport function addRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?DomainMatcher }, listener : RequestListenerType) : { cancel : () => void } {\n    const requestListeners = windowStore('requestListeners');\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    if (Array.isArray(win)) {\n        const listenersCollection = [];\n\n        for (const item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        const listenersCollection = [];\n\n        for (const item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    const existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === WILDCARD) {\n        win = getWildcard();\n    }\n\n    domain = domain || WILDCARD;\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    const nameListeners = requestListeners.getOrSet(win, () => ({}));\n    // $FlowFixMe\n    const domainListeners = getOrSet(nameListeners, name, () => ({}));\n\n    const strDomain = domain.toString();\n\n    let regexListeners;\n    let regexListener;\n\n    if (isRegex(domain)) {\n        regexListeners = getOrSet(domainListeners, __DOMAIN_REGEX__, () => []);\n        regexListener = { regex: domain, listener };\n        regexListeners.push(regexListener);\n    } else {\n        domainListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            delete domainListeners[strDomain];\n\n            if (regexListener) {\n                regexListeners.splice(regexListeners.indexOf(regexListener, 1));\n\n                if (!regexListeners.length) {\n                    delete domainListeners[__DOMAIN_REGEX__];\n                }\n            }\n\n            if (!Object.keys(domainListeners).length) {\n                // $FlowFixMe\n                delete nameListeners[name];\n            }\n\n            // $FlowFixMe\n            if (win && !Object.keys(nameListeners).length) {\n                requestListeners.del(win);\n            }\n        }\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { MESSAGE_TYPE, MESSAGE_ACK, MESSAGE_NAME } from '../../conf';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\nimport type { RequestMessage, AckResponseMessage, SuccessResponseMessage, ErrorResponseMessage } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nexport const RECEIVE_MESSAGE_TYPES = {\n\n    [ MESSAGE_TYPE.REQUEST ](source : CrossDomainWindowType, origin : string, message : RequestMessage, { on, send } : { on : OnType, send : SendType }) : ZalgoPromise<void> {\n\n        const options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (__DEBUG__) {\n            // eslint-disable-next-line no-console\n            console.info('receive::req', logName, origin, '\\n\\n', message.data);\n        }\n\n        function sendResponse(type : $Values<typeof MESSAGE_TYPE>, ack? : $Values<typeof MESSAGE_ACK>, response = {}) {\n\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return;\n            }\n\n            if (__DEBUG__ && type !== MESSAGE_TYPE.ACK) {\n                if (ack === MESSAGE_ACK.SUCCESS) {\n                    // $FlowFixMe\n                    console.info('respond::res', logName, origin, '\\n\\n', response.data);  // eslint-disable-line no-console\n                } else if (ack === MESSAGE_ACK.ERROR) {\n                    // $FlowFixMe\n                    console.error('respond::err', logName, origin, '\\n\\n', response.error); // eslint-disable-line no-console\n                }\n            }\n\n            // $FlowFixMe\n            sendMessage(source, origin, {\n                type,\n                ack,\n                hash:   message.hash,\n                name:   message.name,\n                ...response\n            }, { on, send });\n        }\n\n        return ZalgoPromise.all([\n\n            sendResponse(MESSAGE_TYPE.ACK),\n\n            ZalgoPromise.try(() => {\n\n                if (!options) {\n                    throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n                }\n\n                if (!matchDomain(options.domain, origin)) {\n                    throw new Error(`Request origin ${ origin } does not match domain ${ options.domain.toString() }`);\n                }\n\n                const data = message.data;\n\n                return options.handler({ source, origin, data });\n\n            }).then(data => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.SUCCESS, { data });\n\n            }, error => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.ERROR, { error });\n            })\n\n        ]).then(noop).catch(err => {\n            if (options && options.handleError) {\n                return options.handleError(err);\n            } else {\n                throw err;\n            }\n        });\n    },\n\n    [ MESSAGE_TYPE.ACK ](source : CrossDomainWindowType, origin : string, message : AckResponseMessage) {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Ack source does not match registered window`);\n        }\n\n        options.ack = true;\n    },\n\n    [ MESSAGE_TYPE.RESPONSE ](source : CrossDomainWindowType, origin : string, message : SuccessResponseMessage | ErrorResponseMessage) : void | ZalgoPromise<void> {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Response source does not match registered window`);\n        }\n\n        deleteResponseListener(message.hash);\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (message.ack === MESSAGE_ACK.ERROR) {\n            if (__DEBUG__) {\n                console.error('receive::err', logName, origin, '\\n\\n', message.error); // eslint-disable-line no-console\n            }\n\n            options.promise.reject(message.error);\n\n        } else if (message.ack === MESSAGE_ACK.SUCCESS) {\n            if (__DEBUG__) {\n                console.info('receive::res', logName, origin, '\\n\\n', message.data); // eslint-disable-line no-console\n            }\n\n            options.promise.resolve({ source, origin, data: message.data });\n        }\n    }\n};\n","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, getDomain, isSameTopWindow, PROTOCOL  } from 'cross-domain-utils/src';\nimport { addEventListener, noop } from 'belter/src';\n\nimport { markWindowKnown, needsGlobalMessagingForBrowser } from '../../lib';\nimport { deserializeMessage } from '../../serialize';\nimport { getGlobal, globalStore } from '../../global';\nimport type { OnType, SendType, MessageEvent, CancelableType } from '../../types';\n\nimport { RECEIVE_MESSAGE_TYPES } from './types';\n\nfunction parseMessage(message : string, source : CrossDomainWindowType, origin : string, { on, send } : { on : OnType, send : SendType }) : ?Object {\n    let parsedMessage;\n\n    try {\n        parsedMessage = deserializeMessage(source, origin, message, { on, send });\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    parsedMessage = parsedMessage[__POST_ROBOT__.__GLOBAL_KEY__];\n\n    if (!parsedMessage || typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    if (!parsedMessage.type || typeof parsedMessage.type !== 'string') {\n        return;\n    }\n\n    if (!RECEIVE_MESSAGE_TYPES[parsedMessage.type]) {\n        return;\n    }\n\n    return parsedMessage;\n}\n\nexport function receiveMessage(event : MessageEvent, { on, send } : { on : OnType, send : SendType }) {\n    const receivedMessages = globalStore('receivedMessages');\n\n    if (!window || window.closed) {\n        throw new Error(`Message recieved in closed window`);\n    }\n\n    try {\n        if (!event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    if (__TEST__) {\n        // $FlowFixMe\n        origin = getDomain(source);\n    }\n\n    const message = parseMessage(data, source, origin, { on, send });\n\n    if (!message) {\n        return;\n    }\n\n    markWindowKnown(source);\n\n    if (receivedMessages.has(message.id)) {\n        return;\n    }\n\n    receivedMessages.set(message.id, true);\n\n    if (isWindowClosed(source) && !message.fireAndForget) {\n        return;\n    }\n\n    if (message.origin.indexOf(PROTOCOL.FILE) === 0) {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    RECEIVE_MESSAGE_TYPES[message.type](source, origin, message, { on, send });\n}\n\nexport function setupGlobalReceiveMessage({ on, send } : { on : OnType, send : SendType }) {\n    const global = getGlobal();\n    global.receiveMessage = global.receiveMessage || (message => receiveMessage(message, { on, send }));\n}\n\ntype ListenerEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string,\n    sourceElement : CrossDomainWindowType,\n    originalEvent? : { origin : string }\n|};\n\nexport function messageListener(event : ListenerEvent, { on, send } : { on : OnType, send : SendType }) {\n\n    try {\n        noop(event.source);\n    } catch (err) {\n        return;\n    }\n\n    const source = event.source || event.sourceElement;\n    let origin = event.origin || (event.originalEvent && event.originalEvent.origin);\n    const data = event.data;\n\n    if (origin === 'null') {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    if (!source) {\n        return;\n    }\n\n    if (!origin) {\n        throw new Error(`Post message did not have origin domain`);\n    }\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(source, window) === false) {\n            return;\n        }\n    }\n\n    receiveMessage({ source, origin, data }, { on, send });\n}\n\nexport function listenForMessages({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore().getOrSet('postMessageListener', () => {\n        // $FlowFixMe\n        return addEventListener(window, 'message', event => {\n            // $FlowFixMe\n            messageListener(event, { on, send });\n        });\n    });\n}\n\nexport function stopListenForMessages() {\n    const listener = globalStore().get('postMessageListener');\n    if (listener) {\n        listener.cancel();\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { addRequestListener, type RequestListenerType } from '../drivers';\nimport { WILDCARD } from '../conf';\nimport type { ServerOptionsType, HandlerType, CancelableType } from '../types';\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : CancelableType {\n\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    if (!handler) {\n        throw new Error('Expected handler');\n    }\n\n    options = options || {};\n    options.name = name;\n    options.handler = handler || options.handler;\n\n    const win = options.window;\n    const domain = options.domain;\n\n    const listenerOptions : RequestListenerType = {\n        handler:     options.handler,\n        handleError: options.errorHandler || (err => {\n            throw err;\n        }),\n        window: win,\n        domain: domain || WILDCARD,\n        name\n    };\n\n    const requestListener = addRequestListener({ name, win, domain }, listenerOptions);\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\nexport function once(name : string, options? : ServerOptionsType | HandlerType, handler? : HandlerType) : ZalgoPromise<{ source : mixed, origin : string, data : Object }> {\n    \n    // $FlowFixMe\n    options = options || {};\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    const promise = new ZalgoPromise();\n    let listener; // eslint-disable-line prefer-const\n\n    options.errorHandler = (err) => {\n        listener.cancel();\n        promise.reject(err);\n    };\n\n    listener = on(name, options, event => {\n        listener.cancel();\n        promise.resolve(event);\n        if (handler) {\n            return handler(event);\n        }\n    });\n\n    promise.cancel = listener.cancel;\n    return promise;\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, isRegex, noop, safeInterval, stringify } from 'belter/src';\n\n\nimport { CHILD_WINDOW_TIMEOUT, MESSAGE_TYPE, WILDCARD, MESSAGE_NAME, ACK_TIMEOUT, RES_TIMEOUT, ACK_TIMEOUT_KNOWN, RESPONSE_CYCLE_TIME } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { awaitWindowHello, sayHello, isWindowKnown } from '../lib';\nimport { windowStore } from '../global';\nimport type { SendType } from '../types';\n\nimport { on } from './on';\n\nfunction validateOptions(name : string, win : CrossDomainWindowType, domain : ?DomainMatcher) {\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (domain) {\n        if (typeof domain !== 'string' && !Array.isArray(domain) && !isRegex(domain)) {\n            throw new TypeError(`Expected domain to be a string, array, or regex`);\n        }\n    }\n\n    if (isWindowClosed(win)) {\n        throw new Error('Target window is closed');\n    }\n}\n\nfunction normalizeDomain(win : CrossDomainWindowType, domain : DomainMatcher, childTimeout : number, { send } : { send : SendType }) : ZalgoPromise<string | $ReadOnlyArray<string>> {\n    return ZalgoPromise.try(() => {\n        if (isAncestor(window, win)) {\n            return awaitWindowHello(win, childTimeout);\n        } else if (isRegex(domain)) {\n            // $FlowFixMe\n            return sayHello(win, { send });\n        } else {\n            return { domain };\n        }\n    // $FlowFixMe\n    }).then(({ domain: normalizedDomain }) => {\n\n        // $FlowFixMe\n        return normalizedDomain;\n    });\n}\n\nexport const send : SendType = (win, name, data, options) => {\n\n    // $FlowFixMe\n    options = options || {};\n    let domain = options.domain || WILDCARD;\n    const responseTimeout = options.timeout || RES_TIMEOUT;\n    const childTimeout = options.timeout || CHILD_WINDOW_TIMEOUT;\n    const fireAndForget = options.fireAndForget || false;\n\n    // $FlowFixMe\n    return ZalgoPromise.try(() => {\n        validateOptions(name, win, domain);\n        return normalizeDomain(win, domain, childTimeout, { send });\n    }).then(targetDomain => {\n\n        if (!matchDomain(domain, targetDomain)) {\n            throw new Error(`Domain ${ stringify(domain) } does not match ${ stringify(targetDomain) }`);\n        }\n\n        domain = targetDomain;\n\n        const logName = (name === MESSAGE_NAME.METHOD && data && typeof data.name === 'string') ? `${ data.name }()` : name;\n\n        if (__DEBUG__) {\n            console.info('send::req', logName, domain, '\\n\\n', data); // eslint-disable-line no-console\n        }\n\n        const promise = new ZalgoPromise();\n        const hash = `${ name }_${ uniqueID() }`;\n\n        if (!fireAndForget) {\n            const responseListener : ResponseListenerType = { name, win, domain, promise };\n            addResponseListener(hash, responseListener);\n\n            const reqPromises = windowStore('requestPromises').getOrSet(win, () => []);\n            reqPromises.push(promise);\n\n            promise.catch(() => {\n                markResponseListenerErrored(hash);\n                deleteResponseListener(hash);\n            });\n\n            const totalAckTimeout = isWindowKnown(win) ? ACK_TIMEOUT_KNOWN : ACK_TIMEOUT;\n            const totalResTimeout = responseTimeout;\n\n            let ackTimeout = totalAckTimeout;\n            let resTimeout = totalResTimeout;\n        \n            const interval = safeInterval(() => {\n                if (isWindowClosed(win)) {\n                    return promise.reject(new Error(`Window closed for ${ name } before ${ responseListener.ack ? 'response' : 'ack' }`));\n                }\n\n                if (responseListener.cancelled) {\n                    return promise.reject(new Error(`Response listener was cancelled for ${ name }`));\n                }\n\n                ackTimeout = Math.max(ackTimeout - RESPONSE_CYCLE_TIME, 0);\n                if (resTimeout !== -1) {\n                    resTimeout = Math.max(resTimeout - RESPONSE_CYCLE_TIME, 0);\n                }\n\n                if (!responseListener.ack && ackTimeout === 0) {\n                    return promise.reject(new Error(`No ack for postMessage ${ logName } in ${ getDomain() } in ${ totalAckTimeout }ms`));\n\n                } else if (resTimeout === 0) {\n                    return promise.reject(new Error(`No response for postMessage ${ logName } in ${ getDomain() } in ${ totalResTimeout }ms`));\n                }\n            }, RESPONSE_CYCLE_TIME);\n\n            promise.finally(() => {\n                interval.cancel();\n                reqPromises.splice(reqPromises.indexOf(promise, 1));\n            }).catch(noop);\n        }\n\n        sendMessage(win, domain, {\n            type: MESSAGE_TYPE.REQUEST,\n            hash,\n            name,\n            data,\n            fireAndForget\n        }, { on, send });\n    \n        return fireAndForget ? promise.resolve() : promise;\n    });\n};\n","/* @flow */\n\nimport { setup } from './setup';\nimport { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge, needsBridgeForBrowser, hasBridge,\n    needsBridgeForWin, needsBridgeForDomain, destroyBridges } from './bridge';\n\nexport { ZalgoPromise as Promise } from 'zalgo-promise/src';\n\nexport * from './types';\nexport { ProxyWindow } from './serialize';\nexport { setup, destroy, serializeMessage, deserializeMessage, toProxyWindow } from './setup';\nexport { on, once, send } from './public';\nexport { markWindowKnown } from './lib';\nexport { cleanUpWindow } from './clean';\nexport let bridge;\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n    bridge = { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge,\n        needsBridgeForBrowser, hasBridge, needsBridgeForWin, needsBridgeForDomain, destroyBridges };\n}\n\nif (__POST_ROBOT__.__AUTO_SETUP__) {\n    setup();\n}\n","/* @flow */\n\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\nimport { initHello } from './lib';\nimport { listenForMessages, stopListenForMessages, receiveMessage, setupGlobalReceiveMessage, cancelResponseListeners } from './drivers';\nimport { getGlobal, deleteGlobal } from './global';\nimport { on, send } from './public';\nimport { setupBridge } from './bridge';\nimport { serializeMessage as internalSerializeMessage, deserializeMessage as internalDeserializeMessage, ProxyWindow } from './serialize';\n\nexport function serializeMessage<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T) : string {\n    return internalSerializeMessage(destination, domain, obj, { on, send });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string) : T {\n    return internalDeserializeMessage(source, origin, message, { on, send });\n}\n\nexport function toProxyWindow(win : CrossDomainWindowType | ProxyWindow) : ProxyWindow {\n    return ProxyWindow.toProxyWindow(win, { send });\n}\n\nexport function setup() {\n    if (!getGlobal().initialized) {\n        getGlobal().initialized = true;\n    \n        setupGlobalReceiveMessage({ on, send });\n        listenForMessages({ on, send });\n    \n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            setupBridge({ on, send, receiveMessage });\n        }\n\n        initHello({ on, send });\n    }\n}\n\nexport function destroy() {\n    cancelResponseListeners();\n    stopListenForMessages();\n    deleteGlobal();\n}\n","/* @flow */\n\nimport { isSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nexport function getGlobal(win? : CrossDomainWindowType = window) : Object {\n\n    if (!isSameDomain(win)) {\n        throw new Error(`Can not get global for window on different domain`);\n    }\n\n    if (!win[__ZOID__.__GLOBAL_KEY__]) {\n        win[__ZOID__.__GLOBAL_KEY__] = {};\n    }\n\n    return win[__ZOID__.__GLOBAL_KEY__];\n}\n\nexport function destroyGlobal() {\n    delete window[__ZOID__.__GLOBAL_KEY__];\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nexport type ProxyObject<T> = {|\n    get : () => ZalgoPromise<T>\n|};\n\nexport function getProxyObject<T>(obj : T) : ProxyObject<T> {\n    return {\n        get() : ZalgoPromise<T> {\n            return ZalgoPromise.try(() => {\n                if (this.source && this.source !== window) {\n                    throw new Error(`Can not call get on proxy object from a remote window`);\n                }\n    \n                return obj;\n            });\n        }\n    };\n}\n","/* @flow */\n\nimport { WINDOW_TYPE } from 'cross-domain-utils/src';\n\nexport const ZOID = `zoid`;\n\nexport const POST_MESSAGE = {\n    DELEGATE:       `${ ZOID }_delegate`,\n    ALLOW_DELEGATE: `${ ZOID }_allow_delegate`\n};\n\nexport const PROP_TYPE = {\n    STRING:   `string`,\n    OBJECT:   `object`,\n    FUNCTION: `function`,\n    BOOLEAN:  `boolean`,\n    NUMBER:   `number`,\n    ARRAY:    `array`\n};\n\nexport const INITIAL_PROPS = {\n    RAW: 'raw',\n    UID: 'uid'\n};\n\nexport const WINDOW_REFERENCES = {\n    OPENER: ('opener' : 'opener'),\n    PARENT: ('parent' : 'parent'),\n    GLOBAL: ('global' : 'global')\n};\n\nexport const PROP_SERIALIZATION = {\n    JSON:   ('json' : 'json'),\n    DOTIFY: ('dotify' : 'dotify'),\n    BASE64: ('base64' : 'base64')\n};\n\nexport const CONTEXT = WINDOW_TYPE;\n\nexport const WILDCARD = '*';\n\nexport const DEFAULT_DIMENSIONS = {\n    WIDTH:  '300px',\n    HEIGHT: '150px'\n};\n\nexport const EVENT = {\n    RENDER:   'zoid-render',\n    RENDERED: 'zoid-rendered',\n    DISPLAY:  'zoid-display',\n    ERROR:    'zoid-error',\n    CLOSE:    'zoid-close',\n    PROPS:    'zoid-props',\n    RESIZE:   'zoid-resize'\n};\n","/* @flow */\n\nimport { getDomain, isSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport type { Component } from '../component';\nimport type { PropsType, MixedPropDefinitionType } from '../component/props';\n\nimport type { ChildHelpers } from './index';\n\nexport function normalizeChildProp<T, P>(component : Component<P>, props : (PropsType<P>), key : string, value : T, helpers : ChildHelpers<P>) : ?T  {\n\n    // $FlowFixMe\n    const prop : MixedPropDefinitionType<P> = component.getPropDefinition(key);\n\n    if (!prop) {\n        return value;\n    }\n\n    if (typeof prop.childDecorate === 'function') {\n        return prop.childDecorate({ value, ...helpers });\n    }\n\n    return value;\n}\n\n// eslint-disable-next-line max-params\nexport function normalizeChildProps<P>(parentComponentWindow : CrossDomainWindowType, component : Component<P>, props : (PropsType<P>), origin : string, helpers : ChildHelpers<P>, isUpdate : boolean = false) : (PropsType<P>) {\n\n    const result = {};\n\n    for (const key of Object.keys(props)) {\n        const prop = component.getPropDefinition(key);\n\n        if (prop && prop.sameDomain && (origin !== getDomain(window) || !isSameDomain(parentComponentWindow))) {\n            continue;\n        }\n\n        // $FlowFixMe\n        const value = normalizeChildProp(component, props, key, props[key], helpers);\n\n        result[key] = value;\n        if (prop && prop.alias && !result[prop.alias]) {\n            result[prop.alias] = value;\n        }\n    }\n\n    if (!isUpdate) {\n        for (const key of component.getPropNames()) {\n            if (!props.hasOwnProperty(key)) {\n                result[key] = normalizeChildProp(component, props, key, props[key], helpers);\n            }\n        }\n    }\n\n    // $FlowFixMe\n    return result;\n}\n","/* @flow */\n\nimport { inlineMemoize, stringifyError, base64decode } from 'belter/src';\n\nimport { ZOID } from '../constants';\nimport type { ChildPayload } from '../parent';\n\nfunction parseChildWindowName(windowName : string) : ChildPayload {\n    return inlineMemoize(parseChildWindowName, () => {\n        if (!windowName) {\n            throw new Error(`No window name`);\n        }\n\n        const [ , zoidcomp, name, encodedPayload ] = windowName.split('__');\n\n        if (zoidcomp !== ZOID) {\n            throw new Error(`Window not rendered by zoid - got ${ zoidcomp }`);\n        }\n\n        if (!name) {\n            throw new Error(`Expected component name`);\n        }\n\n        if (!encodedPayload) {\n            throw new Error(`Expected encoded payload`);\n        }\n\n        try {\n            return JSON.parse(decodeURIComponent(base64decode(encodedPayload)));\n        } catch (err) {\n            throw new Error(`Can not decode window name payload: ${ encodedPayload }: ${ stringifyError(err) }`);\n        }\n    }, [ windowName ]);\n}\n\nexport function getChildPayload() : ?ChildPayload {\n    try {\n        return parseChildWindowName(window.name);\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isSameDomain, matchDomain, getDomain, getOpener,\n    getNthParentFromTop, getAncestor, getAllFramesInWindow,\n    type CrossDomainWindowType, onCloseWindow } from 'cross-domain-utils/src';\nimport { markWindowKnown, deserializeMessage, type CrossDomainFunctionType } from 'post-robot/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { extend, waitForDocumentBody, onResize, getElementSafe, assertExists } from 'belter/src';\n\nimport { getGlobal } from '../lib';\nimport { CONTEXT, INITIAL_PROPS, WINDOW_REFERENCES } from '../constants';\nimport type { Component } from '../component';\nimport type { PropsType } from '../component/props';\nimport type { WindowRef, PropRef, ParentExportsType } from '../parent';\n\nimport { normalizeChildProps } from './props';\nimport { getChildPayload } from './window';\n\nexport * from './window';\n\nexport type ChildExportsType<P> = {|\n    updateProps : CrossDomainFunctionType<[ PropsType<P> ], void>,\n    close : CrossDomainFunctionType<[], void>\n|};\n\nexport type ChildHelpers<P> = {|\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    onProps : ((PropsType<P>) => void) => void,\n    getParent : () => CrossDomainWindowType,\n    getParentDomain : () => string\n|};\n\n/*  Child Component\n    ---------------\n\n    This is the portion of code which runs inside the frame or popup window containing the component's implementation.\n\n    When the component author calls myComponent.attach(), it creates a new instance of ChildComponent, which is then\n    responsible for managing the state and messaging back up to the parent, and providing props for the component to\n    utilize.\n*/\n\nexport class ChildComponent<P> {\n\n    component : Component<P>\n    props : PropsType<P>\n    context : string\n    parent : ParentExportsType<P>\n    parentDomain : string\n    parentComponentWindow : CrossDomainWindowType\n\n    onPropHandlers : Array<(PropsType<P>) => void> // eslint-disable-line flowtype/no-mutable-array\n    autoResize : { width : boolean, height : boolean, element? : string }\n\n    constructor(component : Component<P>) {\n        ZalgoPromise.try(() => {\n            this.component = component;\n            this.onPropHandlers = [];\n            \n            const childPayload = getChildPayload();\n\n            if (!childPayload) {\n                throw new Error(`No child payload found`);\n            }\n\n            if (childPayload.version !== __ZOID__.__VERSION__) {\n                throw new Error(`Parent window has zoid version ${ childPayload.version }, child window has version ${ __ZOID__.__VERSION__ }`);\n            }\n\n            const { parent, parentDomain, exports, context, props } = childPayload;\n\n            this.context = context;\n            this.parentComponentWindow = this.getParentComponentWindow(parent);\n            this.parentDomain = parentDomain;\n            this.parent = deserializeMessage(this.parentComponentWindow, parentDomain, exports);\n\n            this.checkParentDomain(parentDomain);\n\n            const initialProps = this.getPropsByRef(this.parentComponentWindow, parentDomain, props);\n            this.setProps(initialProps, parentDomain);\n            markWindowKnown(this.parentComponentWindow);\n            \n            this.watchForClose();\n\n            return this.parent.init(this.buildExports());\n\n        }).then(() => {\n            return this.watchForResize();\n\n        }).catch(err => {\n            this.onError(err);\n        });\n    }\n\n    getHelpers() : ChildHelpers<P> {\n        return {\n            focus:           () => this.focus(),\n            close:           () => this.close(),\n            resize:          ({ width, height }) => this.resize({ width, height }),\n            onError:         (err) => this.onError(err),\n            onProps:         (handler) => this.onProps(handler),\n            getParent:       () => this.parentComponentWindow,\n            getParentDomain: () => this.parentDomain\n        };\n    }\n\n    checkParentDomain(domain : string) {\n        if (!matchDomain(this.component.allowedParentDomains, domain)) {\n            throw new Error(`Can not be rendered by domain: ${ domain }`);\n        }\n    }\n\n    onProps(handler : Function) {\n        this.onPropHandlers.push(handler);\n    }\n\n    getPropsByRef(parentComponentWindow : CrossDomainWindowType, domain : string, { type, value, uid } : PropRef) : (PropsType<P>) {\n        let props;\n\n        if (type === INITIAL_PROPS.RAW) {\n            props = value;\n        } else if (type === INITIAL_PROPS.UID) {\n            if (!isSameDomain(parentComponentWindow)) {\n                throw new Error(`Parent component window is on a different domain - expected ${ getDomain() } - can not retrieve props`);\n            }\n\n            const global = getGlobal(parentComponentWindow);\n            props = assertExists('props', global && global.props[uid]);\n        }\n\n        if (!props) {\n            throw new Error(`Could not find props`);\n        }\n\n        return deserializeMessage(parentComponentWindow, domain, props);\n    }\n\n    getParentComponentWindow(ref : WindowRef) : CrossDomainWindowType {\n        const { type } = ref;\n    \n        if (type === WINDOW_REFERENCES.OPENER) {\n            return assertExists('opener', getOpener(window));\n    \n        } else if (type === WINDOW_REFERENCES.PARENT && typeof ref.distance === 'number') {\n            return assertExists('parent', getNthParentFromTop(window, ref.distance));\n\n        } else if (type === WINDOW_REFERENCES.GLOBAL && ref.uid && typeof ref.uid === 'string') {\n            const { uid } = ref;\n            const ancestor = getAncestor(window);\n\n            if (!ancestor) {\n                throw new Error(`Can not find ancestor window`);\n            }\n\n            for (const frame of getAllFramesInWindow(ancestor)) {\n                if (isSameDomain(frame)) {\n                    const global = getGlobal(frame);\n\n                    if (global && global.windows && global.windows[uid]) {\n                        return global.windows[uid];\n                    }\n                }\n            }\n        }\n    \n        throw new Error(`Unable to find ${ type } parent component window`);\n    }\n\n    getProps() : PropsType<P> {\n        // $FlowFixMe\n        this.props = this.props || {};\n        return this.props;\n    }\n\n    setProps(props : PropsType<P>, origin : string, isUpdate : boolean = false) {\n        const helpers = this.getHelpers();\n        const existingProps = this.getProps();\n        const normalizedProps = normalizeChildProps(this.parentComponentWindow, this.component, props, origin, helpers, isUpdate);\n\n        extend(existingProps, normalizedProps);\n\n        for (const handler of this.onPropHandlers) {\n            handler.call(this, existingProps);\n        }\n    }\n\n    watchForClose() {\n        window.addEventListener('beforeunload', () => {\n            this.parent.checkClose.fireAndForget();\n        });\n\n        window.addEventListener('unload', () => {\n            this.parent.checkClose.fireAndForget();\n        });\n\n        onCloseWindow(this.parentComponentWindow, () => {\n            this.destroy();\n        });\n    }\n\n    getAutoResize() : { width : boolean, height : boolean, element : ?HTMLElement } {\n        let { width = false, height = false, element = 'body' } = this.autoResize || this.component.autoResize || {};\n        element = getElementSafe(element);\n        return { width, height, element };\n    }\n\n    watchForResize() : ?ZalgoPromise<void> {\n        return waitForDocumentBody().then(() => {\n            const { width, height, element } = this.getAutoResize();\n\n            if (!element || (!width && !height) || this.context === CONTEXT.POPUP) {\n                return;\n            }\n\n            onResize(element, ({ width: newWidth, height: newHeight }) => {\n                this.resize({\n                    width:  width ? newWidth : undefined,\n                    height: height ? newHeight : undefined\n                });\n            }, { width, height });\n        });\n    }\n\n    buildExports() : ChildExportsType<P> {\n\n        const self = this;\n\n        return {\n            updateProps(props : (PropsType<P>)) : ZalgoPromise<void> {\n                return ZalgoPromise.try(() => self.setProps(props, this.__origin__, true));\n            },\n\n            close() : ZalgoPromise<void> {\n                return ZalgoPromise.try(() => self.destroy());\n            }\n        };\n    }\n\n    resize({ width, height } : { width : ?number, height : ?number }) : ZalgoPromise<void> {\n        return this.parent.resize.fireAndForget({ width, height });\n    }\n\n    close() : ZalgoPromise<void> {\n        return this.parent.close();\n    }\n    \n    destroy() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            window.close();\n        });\n    }\n\n    focus() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            window.focus();\n        });\n    }\n\n    onError(err : mixed) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.parent && this.parent.onError) {\n                return this.parent.onError(err);\n            } else {\n                throw err;\n            }\n        });\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { cleanUpWindow, ProxyWindow, toProxyWindow } from 'post-robot/src';\nimport { assertSameDomain, closeWindow } from 'cross-domain-utils/src';\nimport { iframe, popup, destroyElement, normalizeDimension, watchElementForClose,\n    awaitFrameWindow, uniqueID } from 'belter/src';\n\nimport { CONTEXT } from '../constants';\nimport { getProxyObject, type ProxyObject } from '../lib';\n\n\nexport type ContextDriverType = {|\n    openOnClick : boolean,\n    openFrame? : () => ProxyObject<HTMLIFrameElement>,\n    open : (?ProxyObject<HTMLIFrameElement>) => ZalgoPromise<ProxyWindow>,\n    openPrerenderFrame? : () => ProxyObject<HTMLIFrameElement>,\n    openPrerender : (ProxyWindow, ?ProxyObject<HTMLIFrameElement>) => ZalgoPromise<ProxyWindow>,\n    resize? : ({ width : ?number, height : ?number }) => void,\n    delegate : $ReadOnlyArray<string>\n|};\n\nexport const RENDER_DRIVERS : { [string] : ContextDriverType } = {};\n\nRENDER_DRIVERS[CONTEXT.IFRAME] = {\n    openOnClick: false,\n\n    openFrame() : ProxyObject<HTMLIFrameElement> {\n        return getProxyObject(iframe({\n            attributes: {\n                title: this.component.name,\n                ...this.component.attributes.iframe\n            }\n        }));\n    },\n\n    open(proxyFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        if (!proxyFrame) {\n            throw new Error(`Expected proxy frame to be passed`);\n        }\n\n        return proxyFrame.get().then(frame => {\n            return awaitFrameWindow(frame).then(win => {\n\n                const frameWatcher = watchElementForClose(frame, () => this.close());\n                this.clean.register(() => frameWatcher.cancel());\n                this.clean.register(() => destroyElement(frame));\n                this.clean.register(() => cleanUpWindow(win));\n\n                return toProxyWindow(win);\n            });\n        });\n    },\n\n    openPrerenderFrame() : ProxyObject<HTMLIFrameElement> {\n        return getProxyObject(iframe({\n            attributes: {\n                name:  `__zoid_prerender_frame__${ this.component.name }_${ uniqueID() }__`,\n                title: `prerender__${ this.component.name }`,\n                ...this.component.attributes.iframe\n            }\n        }));\n    },\n\n    openPrerender(proxyWin : ProxyWindow, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        if (!proxyPrerenderFrame) {\n            throw new Error(`Expected proxy frame to be passed`);\n        }\n        \n        return proxyPrerenderFrame.get().then(prerenderFrame => {\n            this.clean.register(() => destroyElement(prerenderFrame));\n\n            return awaitFrameWindow(prerenderFrame).then(prerenderFrameWindow => {\n                return assertSameDomain(prerenderFrameWindow);\n            }).then(win => {\n                return toProxyWindow(win);\n            });\n        });\n    },\n\n    delegate: [\n        'getProxyContainer',\n        'renderContainer',\n        'openFrame',\n        'openPrerenderFrame',\n        'prerender',\n        'open',\n        'openPrerender'\n    ]\n};\n\nif (__ZOID__.__POPUP_SUPPORT__) {\n    RENDER_DRIVERS[CONTEXT.POPUP] = {\n        openOnClick: true,\n\n        open() : ZalgoPromise<ProxyWindow> {\n            return ZalgoPromise.try(() => {\n                let { width, height } = this.component.dimensions;\n\n                width = normalizeDimension(width, window.outerWidth);\n                height = normalizeDimension(height, window.outerWidth);\n\n                const win = popup('', {\n                    width,\n                    height,\n                    ...this.component.attributes.popup\n                });\n\n                this.clean.register(() => {\n                    closeWindow(win);\n                    cleanUpWindow(win);\n                });\n\n                return toProxyWindow(win);\n            });\n        },\n\n        openPrerender(proxyWin : ProxyWindow) : ZalgoPromise<ProxyWindow> {\n            return ZalgoPromise.try(() => {\n                return proxyWin;\n            });\n        },\n\n        delegate: [\n            'getProxyContainer',\n            'renderContainer',\n            'setProxyWin'\n        ]\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { dotify, isDefined, extend } from 'belter/src';\n\nimport type { Component } from '../component';\nimport type { BuiltInPropsDefinitionType, PropsInputType, PropsType, MixedPropDefinitionType } from '../component/props';\nimport { PROP_SERIALIZATION } from '../constants';\n\nimport type { ParentHelpers } from './index';\n\n/*  Normalize Props\n    ---------------\n\n    Turn props into normalized values, using defaults, function options, etc.\n*/\n\nexport function extendProps<P>(component : Component<P>, props : PropsType<P>, inputProps : PropsInputType<P>, helpers : ParentHelpers<P>, isUpdate : boolean = false) { // eslint-disable-line complexity\n\n    // $FlowFixMe\n    inputProps = inputProps || {};\n    extend(props, inputProps);\n\n    const propNames = isUpdate ? [] : [ ...component.getPropNames() ];\n\n    for (const key of Object.keys(inputProps)) {\n        if (propNames.indexOf(key) === -1) {\n            propNames.push(key);\n        }\n    }\n\n    const aliases = [];\n\n    const { state, close, focus, onError } = helpers;\n\n    for (const key of propNames) {\n        const propDef = component.getPropDefinition(key);\n        let value = inputProps[key];\n\n        if (!propDef) {\n            continue;\n        }\n\n        const alias = propDef.alias;\n        if (alias) {\n            if (!isDefined(value) && isDefined(inputProps[alias])) {\n                value = inputProps[alias];\n            }\n            aliases.push(alias);\n        }\n\n        if (propDef.value) {\n            value = propDef.value({ props, state, close, focus, onError });\n        }\n\n        if (!isDefined(value) && propDef.default) {\n            value = propDef.default({ props, state, close, focus, onError });\n        }\n\n        if (isDefined(value)) {\n            if (propDef.type === 'array' ? !Array.isArray(value) : (typeof value !== propDef.type)) {\n                throw new TypeError(`Prop is not of type ${ propDef.type }: ${ key }`);\n            }\n        }\n        \n        // $FlowFixMe\n        props[key] = value;\n    }\n\n    for (const alias of aliases) {\n        delete props[alias];\n    }\n\n    // $FlowFixMe\n    for (const key of Object.keys(props)) {\n        const propDef = component.getPropDefinition(key);\n        const value = props[key];\n\n        if (!propDef) {\n            continue;\n        }\n\n        if (isDefined(value) && propDef.validate) {\n            // $FlowFixMe\n            propDef.validate({ value, props });\n        }\n\n        if (isDefined(value) && propDef.decorate) {\n            props[key] = propDef.decorate({ value, props, state, close, focus, onError });\n        }\n    }\n\n    for (const key of component.getPropNames()) {\n        const propDef = component.getPropDefinition(key);\n        if (propDef.required !== false && !isDefined(props[key])) {\n            throw new Error(`Expected prop \"${ key }\" to be defined`);\n        }\n    }\n}\n\n// $FlowFixMe\nfunction getQueryParam<T, P>(prop : MixedPropDefinitionType<P>, key : string, value : T) : ZalgoPromise<string> {\n    return ZalgoPromise.try(() => {\n        if (typeof prop.queryParam === 'function') {\n            return prop.queryParam({ value });\n        } else if (typeof prop.queryParam === 'string') {\n            return prop.queryParam;\n        } else {\n            return key;\n        }\n    });\n}\n\n// $FlowFixMe\nfunction getQueryValue<T, P>(prop : MixedPropDefinitionType<P>, key : string, value : T) : ZalgoPromise<mixed> {\n    return ZalgoPromise.try(() => {\n        if (typeof prop.queryValue === 'function' && isDefined(value)) {\n            return prop.queryValue({ value });\n        } else {\n            return value;\n        }\n    });\n}\n\nexport function propsToQuery<P>(propsDef : BuiltInPropsDefinitionType<P>, props : (PropsType<P>)) : ZalgoPromise<{ [string] : string }> {\n\n    const params = {};\n\n    // $FlowFixMe\n    const keys = Object.keys(props);\n    \n    return ZalgoPromise.all(keys.map(key => {\n\n        const prop = propsDef[key];\n\n        if (!prop) {\n            return; // eslint-disable-line array-callback-return\n        }\n\n        return ZalgoPromise.resolve().then(() => {\n\n            const value = props[key];\n\n            if (!value) {\n                return;\n            }\n\n            if (!prop.queryParam) {\n                return;\n            }\n\n            return value;\n\n        }).then(value => {\n\n            if (value === null || typeof value === 'undefined') {\n                return;\n            }\n\n            return ZalgoPromise.all([\n                getQueryParam(prop, key, value),\n                getQueryValue(prop, key, value)\n            ]).then(([ queryParam, queryValue ]) => {\n\n                let result;\n\n                if (typeof queryValue === 'boolean') {\n                    result = queryValue.toString();\n                } else if (typeof queryValue === 'string') {\n                    result = queryValue.toString();\n                } else if (typeof queryValue === 'object' && queryValue !== null) {\n\n                    if (prop.serialization === PROP_SERIALIZATION.JSON) {\n                        result = JSON.stringify(queryValue);\n                    } else if (prop.serialization === PROP_SERIALIZATION.BASE64) {\n                        result = btoa(JSON.stringify(queryValue));\n                    } else if (prop.serialization === PROP_SERIALIZATION.DOTIFY || !prop.serialization) {\n                        result = dotify(queryValue, key);\n\n                        for (const dotkey of Object.keys(result)) {\n                            params[dotkey] = result[dotkey];\n                        }\n\n                        return;\n                    }\n\n                } else if (typeof queryValue === 'number') {\n                    result = queryValue.toString();\n                }\n\n                params[queryParam] = result;\n            });\n        });\n\n    })).then(() => {\n        return params;\n    });\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { windowStore } from './global';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n    const requestPromises = windowStore('requestPromises');\n    for (const promise of requestPromises.get(win, [])) {\n        promise.reject(new Error(`Window cleaned up before response`)).catch(noop);\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { send, bridge, serializeMessage, ProxyWindow, toProxyWindow, type CrossDomainFunctionType } from 'post-robot/src';\nimport { isSameDomain, matchDomain, getDomainFromUrl, isBlankDomain,\n    getDomain, type CrossDomainWindowType,\n    getDistanceFromTop, normalizeMockUrl, assertSameDomain } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { addEventListener, uniqueID, elementReady, writeElementToWindow, eventEmitter, type EventEmitterType,\n    noop, onResize, extendUrl, appendChild, cleanup, type CleanupType, base64encode,\n    once, stringifyError, destroyElement, getElementSafe } from 'belter/src';\n\nimport { ZOID, POST_MESSAGE, CONTEXT, EVENT,\n    INITIAL_PROPS, WINDOW_REFERENCES } from '../constants';\nimport type { Component, onErrorPropType } from '../component';\nimport { getGlobal, getProxyObject, type ProxyObject } from '../lib';\nimport type { PropsInputType, PropsType } from '../component/props';\nimport type { ChildExportsType } from '../child';\nimport type { DimensionsType } from '../types';\n\nimport { RENDER_DRIVERS, type ContextDriverType } from './drivers';\nimport { propsToQuery, extendProps } from './props';\n\nexport type RenderOptionsType<P> = {|\n    uid : string,\n    props : PropsInputType<P>,\n    tag : string,\n    context : string,\n    close : (?string) => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<ProxyWindow>,\n    doc : Document,\n    container? : HTMLElement,\n    dimensions : DimensionsType,\n    state : Object,\n    event : EventEmitterType,\n    frame : ?HTMLIFrameElement,\n    prerenderFrame : ?HTMLIFrameElement\n|};\n\nexport type ParentExportsType<P> = {|\n    init : (ChildExportsType<P>) => ZalgoPromise<void>,\n    close : () => ZalgoPromise<void>,\n    checkClose : CrossDomainFunctionType<[], void>,\n    resize : CrossDomainFunctionType<[{ width? : ?number, height? : ?number }], void>,\n    onError : (mixed) => ZalgoPromise<void>\n|};\n\nexport type PropRef =\n    {| type : typeof INITIAL_PROPS.RAW, uid? : string, value? : string |};\n\nexport type WindowRef =\n    {| type : typeof WINDOW_REFERENCES.OPENER |} |\n    {| type : typeof WINDOW_REFERENCES.PARENT, distance : number |} |\n    {| type : typeof WINDOW_REFERENCES.GLOBAL, uid : string |};\n\nexport type ChildPayload = {|\n    uid : string,\n    tag : string,\n    version : string,\n    context : $Values<typeof CONTEXT>,\n    parentDomain : string,\n    childDomain : string,\n    parent : WindowRef,\n    props : PropRef,\n    exports : string\n|};\n\nexport type StateType = Object;\n\nexport type ParentHelpers<P> = {|\n    state : StateType,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    updateProps : PropsInputType<P> => ZalgoPromise<void>,\n    event : EventEmitterType\n|};\n\nexport class ParentComponent<P> {\n\n    component : Component<P>\n    driver : ContextDriverType\n    clean : CleanupType\n    event : EventEmitterType\n\n    initPromise : ZalgoPromise<void>\n    handledErrors : Array<mixed> // eslint-disable-line flowtype/no-mutable-array\n\n    props : PropsType<P>\n    state : StateType\n    child : ?ChildExportsType<P>\n\n    proxyWin : ?ProxyWindow\n\n    constructor(component : Component<P>, props : PropsInputType<P>) {\n        this.initPromise = new ZalgoPromise();\n        this.handledErrors = [];\n\n        // $FlowFixMe\n        this.props = {};\n\n        this.clean = cleanup(this);\n        this.state = {};\n\n        this.component = component;\n\n        this.setupEvents(props.onError);\n        this.setProps(props);\n        this.component.registerActiveComponent(this);\n        this.clean.register(() => this.component.destroyActiveComponent(this));\n        this.watchForUnload();\n    }\n\n    setupEvents(onError : ?onErrorPropType) {\n        this.event = eventEmitter();\n\n        this.event.on(EVENT.RENDER,   () => this.props.onRender());\n        this.event.on(EVENT.DISPLAY,  () => this.props.onDisplay());\n        this.event.on(EVENT.RENDERED, () => this.props.onRendered());\n        this.event.on(EVENT.CLOSE,    () => this.props.onClose());\n        this.event.on(EVENT.RESIZE,   () => this.props.onResize());\n        this.event.on(EVENT.PROPS,    (props) => this.props.onProps(props));\n\n        this.event.on(EVENT.ERROR, err => {\n            if (this.props && this.props.onError) {\n                return this.props.onError(err);\n            } else if (onError) {\n                return onError(err);\n            } else {\n                return this.initPromise.reject(err).then(() => {\n                    setTimeout(() => {\n                        throw err;\n                    }, 1);\n                });\n            }\n        });\n    }\n\n    render(target : CrossDomainWindowType, container : string | HTMLElement, context : $Values<typeof CONTEXT>) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`render`);\n\n            this.driver = RENDER_DRIVERS[context];\n            const uid = `${ ZOID }-${ this.component.tag }-${ uniqueID() }`;\n            const domain = this.getDomain();\n            const childDomain = this.getChildDomain();\n\n            this.component.checkAllowRender(target, domain, container);\n\n            if (target !== window) {\n                this.delegate(context, target);\n            }\n\n            const tasks = {};\n\n            const init = this.initPromise;\n            const buildUrl = this.buildUrl();\n            const onRender = this.event.trigger(EVENT.RENDER);\n\n            const getProxyContainer = this.getProxyContainer(container);\n\n            const openFrame = this.openFrame();\n            const openPrerenderFrame = this.openPrerenderFrame();\n\n            const renderContainer = ZalgoPromise.hash({ proxyContainer: getProxyContainer, proxyFrame: openFrame, proxyPrerenderFrame: openPrerenderFrame }).then(({ proxyContainer, proxyFrame, proxyPrerenderFrame }) => {\n                return this.renderContainer(proxyContainer, { context, uid, proxyFrame, proxyPrerenderFrame });\n            });\n\n            const open = this.driver.openOnClick\n                ? this.open()\n                : openFrame.then(proxyFrame => this.open(proxyFrame));\n\n            const openPrerender = ZalgoPromise.hash({ proxyWin: open, proxyPrerenderFrame: openPrerenderFrame }).then(({ proxyWin, proxyPrerenderFrame }) => {\n                return this.openPrerender(proxyWin, proxyPrerenderFrame);\n            });\n\n            const setState = open.then(proxyWin => {\n                this.proxyWin = proxyWin;\n                return this.setProxyWin(proxyWin);\n            });\n\n            const prerender = ZalgoPromise.hash({ proxyPrerenderWin: openPrerender, state: setState }).then(({ proxyPrerenderWin }) => {\n                return this.prerender(proxyPrerenderWin, { context, uid });\n            });\n\n            const buildWindowName = open.then(proxyWin => {\n                return this.buildWindowName({ proxyWin, childDomain, domain, target, context, uid });\n            });\n\n            const setWindowName =  ZalgoPromise.hash({ proxyWin: open, windowName: buildWindowName }).then(({ proxyWin, windowName }) => {\n                return proxyWin.setName(windowName);\n            });\n\n            const loadUrl = ZalgoPromise.hash({ proxyWin: open, url: buildUrl, windowName: setWindowName, prerender }).then(({ proxyWin, url }) => {\n                return proxyWin.setLocation(url);\n            });\n\n            const watchForClose = open.then(proxyWin => {\n                this.watchForClose(proxyWin);\n            });\n\n            const onDisplay = ZalgoPromise.hash({ container: renderContainer, prerender }).then(() => {\n                return this.event.trigger(EVENT.DISPLAY);\n            });\n\n            const openBridge = open.then(proxyWin => {\n                return this.openBridge(proxyWin, childDomain, context);\n            });\n\n            const runTimeout = loadUrl.then(() => {\n                return this.runTimeout();\n            });\n\n            const onRendered = init.then(() => {\n                return this.event.trigger(EVENT.RENDERED);\n            });\n\n            return ZalgoPromise.hash({\n                init, buildUrl, onRender, getProxyContainer, openFrame, openPrerenderFrame, renderContainer, open,\n                openPrerender, setState, prerender, loadUrl, buildWindowName, setWindowName, watchForClose, onDisplay,\n                openBridge, runTimeout, onRendered\n            }).catch(err => {\n                for (const taskName of Object.keys(tasks)) {\n                    tasks[taskName].reject(err);\n                }\n\n                throw err;\n            });\n\n        }).catch(err => {\n            return ZalgoPromise.all([\n                this.onError(err),\n                this.destroy(err)\n            ]).then(() => {\n                throw err;\n            });\n        }).then(noop);\n    }\n\n    getProxyContainer(container : string | HTMLElement) : ZalgoPromise<ProxyObject<HTMLElement>> {\n        return ZalgoPromise.try(() => {\n            return elementReady(container);\n        }).then(containerElement => {\n            return getProxyObject(containerElement);\n        });\n    }\n\n    buildWindowName({ proxyWin, childDomain, domain, target, uid, context } : { proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, target : CrossDomainWindowType, context : $Values<typeof CONTEXT>, uid : string }) : string {\n        const childPayload = this.buildChildPayload({ proxyWin, childDomain, domain, target, context, uid });\n        return `__${ ZOID }__${ this.component.name }__${ base64encode(encodeURIComponent(JSON.stringify(childPayload))) }__`;\n    }\n\n    getPropsRef(proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, uid : string) : PropRef {\n        const value = serializeMessage(proxyWin, domain, this.getPropsForChild(domain));\n\n        const propRef = (childDomain === getDomain())\n            ? { type: INITIAL_PROPS.UID, uid }\n            : { type: INITIAL_PROPS.RAW, value };\n\n        if (propRef.type === INITIAL_PROPS.UID) {\n            const global = getGlobal(window);\n            global.props = global.props || {};\n            global.props[uid] = value;\n\n            this.clean.register(() => {\n                delete global.props[uid];\n            });\n        }\n\n        return propRef;\n    }\n\n    buildChildPayload({ proxyWin, childDomain, domain, target = window, context, uid } : { proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, target : CrossDomainWindowType, context : $Values<typeof CONTEXT>, uid : string } = {}) : ChildPayload {\n        return {\n            uid,\n            context,\n            version:      __ZOID__.__VERSION__,\n            childDomain,\n            parentDomain: getDomain(window),\n            tag:          this.component.tag,\n            parent:       this.getWindowRef(target, childDomain, uid, context),\n            props:        this.getPropsRef(proxyWin, childDomain, domain, uid),\n            exports:      serializeMessage(proxyWin, domain, this.buildParentExports(proxyWin))\n        };\n    }\n\n    setProxyWin(proxyWin : ProxyWindow) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.proxyWin = proxyWin;\n        });\n    }\n\n    getHelpers() : ParentHelpers<P> {\n        return {\n            state:       this.state,\n            event:       this.event,\n            close:       () => this.close(),\n            focus:       () => this.focus(),\n            resize:      ({ width, height }) => this.resize({ width, height }),\n            onError:     (err) => this.onError(err),\n            updateProps: (props) => this.updateProps(props)\n        };\n    }\n\n    setProps(props : PropsInputType<P>, isUpdate : boolean = false) {\n        if (this.component.validate) {\n            this.component.validate({ props });\n        }\n\n        const helpers = this.getHelpers();\n        extendProps(this.component, this.props, props, helpers, isUpdate);\n    }\n\n    buildUrl() : ZalgoPromise<string> {\n        return propsToQuery({ ...this.component.props, ...this.component.builtinProps }, this.props).then(query => {\n            return extendUrl(normalizeMockUrl(this.component.getUrl(this.props)), { query });\n        });\n    }\n\n    getDomain() : string | RegExp {\n        return this.component.getDomain(this.props);\n    }\n\n    getChildDomain() : string {\n        return this.component.getChildDomain(this.props);\n    }\n\n    getPropsForChild(domain : string | RegExp) : (PropsType<P>) {\n        const result = {};\n\n        for (const key of Object.keys(this.props)) {\n            const prop = this.component.getPropDefinition(key);\n\n            if (prop && prop.sendToChild === false) {\n                continue;\n            }\n\n            if (prop && prop.sameDomain && !matchDomain(domain, getDomain(window))) {\n                continue;\n            }\n\n            result[key] = this.props[key];\n        }\n\n        // $FlowFixMe\n        return result;\n    }\n\n    updateProps(props : PropsInputType<P>) : ZalgoPromise<void> {\n        this.setProps(props, true);\n\n        return this.initPromise.then(() => {\n            if (this.child) {\n                return this.child.updateProps(this.getPropsForChild(this.getDomain())).catch(err => {\n                    if (!this.child || !this.proxyWin) {\n                        return;\n                    }\n\n                    return this.checkClose(this.proxyWin).then(() => {\n                        if (this.child) {\n                            throw err;\n                        }\n                    });\n                });\n            }\n        });\n    }\n\n    openFrame() : ZalgoPromise<?ProxyObject<HTMLIFrameElement>> {\n        return ZalgoPromise.try(() => {\n            if (this.driver.openFrame) {\n                return this.driver.openFrame.call(this);\n            }\n        });\n    }\n\n    openPrerenderFrame() : ZalgoPromise<?ProxyObject<HTMLIFrameElement>> {\n        return ZalgoPromise.try(() => {\n            if (this.driver.openPrerenderFrame) {\n                return this.driver.openPrerenderFrame.call(this);\n            }\n        });\n    }\n\n    open(proxyFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`open`);\n\n            const windowProp = this.props.window;\n\n            if (windowProp) {\n                this.clean.register(() => windowProp.close());\n                return toProxyWindow(windowProp);\n            }\n\n            return this.driver.open.call(this, proxyFrame);\n\n        }).then(proxyWin => {\n            this.proxyWin = proxyWin;\n            return proxyWin;\n        });\n    }\n\n    openPrerender(proxyWin : ProxyWindow, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            return this.driver.openPrerender.call(this, proxyWin, proxyPrerenderFrame);\n        });\n    }\n\n    focus() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.proxyWin) {\n                return this.proxyWin.focus().then(noop);\n            }\n        });\n    }\n\n    delegate(context : $Values<typeof CONTEXT>, target : CrossDomainWindowType) {\n        this.component.log(`delegate`);\n\n        const props = {};\n        for (const propName of this.component.getPropNames()) {\n            if (this.component.getPropDefinition(propName).allowDelegate) {\n                props[propName] = this.props[propName];\n            }\n        }\n\n        const overridesPromise = send(target, `${ POST_MESSAGE.DELEGATE }_${ this.component.name }`, {\n            context,\n            props,\n            overrides: {\n                event:   this.event,\n                close:   () => this.close(),\n                onError: (err) => this.onError(err)\n            }\n\n        }).then(({ data }) => {\n            this.clean.register(data.destroy);\n            return data.overrides;\n\n        }).catch(err => {\n            throw new Error(`Unable to delegate rendering. Possibly the component is not loaded in the target window.\\n\\n${ stringifyError(err) }`);\n        });\n\n        for (const key of this.driver.delegate) {\n            // $FlowFixMe\n            this[key] = function overriddenFunction() : ZalgoPromise<mixed> {\n                return overridesPromise.then(overrides => {\n                    return overrides[key].apply(this, arguments);\n                });\n            };\n        }\n    }\n\n    getWindowRef(target : CrossDomainWindowType, domain : string, uid : string, context : $Values<typeof CONTEXT>) : WindowRef {\n\n        if (domain === getDomain(window)) {\n            const global = getGlobal(window);\n            global.windows = global.windows || {};\n            global.windows[uid] = window;\n            this.clean.register(() => {\n                delete global.windows[uid];\n            });\n\n            return { type: WINDOW_REFERENCES.GLOBAL, uid };\n        }\n\n        if (context === CONTEXT.POPUP) {\n            return { type: WINDOW_REFERENCES.OPENER };\n        }\n\n        return { type: WINDOW_REFERENCES.PARENT, distance: getDistanceFromTop(window) };\n    }\n\n    watchForClose(proxyWin : ProxyWindow) : ZalgoPromise<void> {\n        let cancelled = false;\n\n        this.clean.register(() => {\n            cancelled = true;\n        });\n\n        return ZalgoPromise.delay(2000).then(() => {\n            return proxyWin.isClosed();\n        }).then(isClosed => {\n            if (isClosed) {\n                this.component.log(`detect_close_child`);\n                return this.close();\n            } else if (!cancelled) {\n                return this.watchForClose(proxyWin);\n            }\n        });\n    }\n\n    watchForUnload() {\n        const unloadWindowListener = addEventListener(window, 'unload', once(() => {\n            this.component.log(`navigate_away`);\n            this.destroy(new Error(`Window navigated away`));\n        }));\n\n        this.clean.register(unloadWindowListener.cancel);\n    }\n\n    runTimeout() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            const timeout = this.props.timeout;\n\n            if (timeout) {\n                return this.initPromise.timeout(timeout, new Error(`Loading component timed out after ${ timeout } milliseconds`));\n            }\n        });\n    }\n\n    initChild(child : ChildExportsType<P>) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.clean.set('child', child);\n            this.initPromise.resolve();\n        });\n    }\n\n    buildParentExports(win : ProxyWindow) : ParentExportsType<P> {\n        const onError    = (err) => this.onError(err);\n        const init       = (child) => this.initChild(child);\n        const close      = () => this.close();\n        const checkClose = () => this.checkClose(win);\n        const resize     = ({ width, height }) => this.resize({ width, height });\n\n        init.onError = onError;\n\n        return { init, close, checkClose, resize, onError };\n    }\n\n    resize({ width, height } : { width? : ?number, height? : ?number }) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.event.trigger(EVENT.RESIZE, { width, height });\n        });\n    }\n\n    checkClose(win : ProxyWindow) : ZalgoPromise<void> {\n        return win.isClosed().then(closed => {\n            if (closed) {\n                return this.close();\n            }\n\n            return ZalgoPromise.delay(200)\n                .then(() => win.isClosed())\n                .then(secondClosed => {\n                    if (secondClosed) {\n                        return this.close();\n                    }\n                });\n        });\n    }\n\n    close() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`close`);\n            return this.event.trigger(EVENT.CLOSE);\n\n        }).then(() => {\n            if (this.child) {\n                this.child.close.fireAndForget().catch(noop);\n            }\n\n            return this.destroy(new Error(`Window closed`), false);\n        });\n    }\n\n    prerender(proxyPrerenderWin : ProxyWindow, { context, uid } : { context : $Values<typeof CONTEXT>, uid : string }) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            const prerenderTemplate = this.component.prerenderTemplate;\n\n            if (!prerenderTemplate) {\n                return;\n            }\n\n            let prerenderWindow = proxyPrerenderWin.getWindow();\n\n            if (!prerenderWindow || !isSameDomain(prerenderWindow) || !isBlankDomain(prerenderWindow)) {\n                return;\n            }\n\n            prerenderWindow = assertSameDomain(prerenderWindow);\n\n            const doc = prerenderWindow.document;\n            const el = this.renderTemplate(prerenderTemplate, { context, uid, doc });\n\n            if (!el) {\n                return;\n            }\n\n            if (el.ownerDocument !== doc) {\n                throw new Error(`Expected prerender template to have been created with document from child window`);\n            }\n\n            writeElementToWindow(prerenderWindow, el);\n\n            let { width = false, height = false, element = 'body' } = this.component.autoResize || {};\n            element = getElementSafe(element, doc);\n\n            if (element && (width || height)) {\n                onResize(element, ({ width: newWidth, height: newHeight }) => {\n                    this.resize({\n                        width:  width ? newWidth : undefined,\n                        height: height ? newHeight : undefined\n                    });\n                }, { width, height, win: prerenderWindow });\n            }\n        });\n    }\n\n    renderTemplate(renderer : (RenderOptionsType<P>) => ?HTMLElement, { context, uid, container, doc, frame, prerenderFrame } : { context : $Values<typeof CONTEXT>, uid : string, container? : HTMLElement, doc : Document, frame? : ?HTMLIFrameElement, prerenderFrame? : ?HTMLIFrameElement }) : ?HTMLElement {\n        // $FlowFixMe\n        return renderer.call(this, {\n            container,\n            context,\n            uid,\n            doc,\n            frame,\n            prerenderFrame,\n            focus:      () => this.focus(),\n            close:      () => this.close(),\n            state:      this.state,\n            props:      this.props,\n            tag:        this.component.tag,\n            dimensions: this.component.dimensions,\n            event:      this.event\n        });\n    }\n\n    renderContainer(proxyContainer : ProxyObject<HTMLElement>, { proxyFrame, proxyPrerenderFrame, context, uid } :\n        { context : $Values<typeof CONTEXT>, uid : string, proxyFrame : ?ProxyObject<HTMLIFrameElement>, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement> }) : ZalgoPromise<?ProxyObject<HTMLElement>> {\n\n\n        return ZalgoPromise.hash({\n            container:      proxyContainer.get().then(elementReady),\n            // $FlowFixMe\n            frame:          proxyFrame ? proxyFrame.get() : null,\n            // $FlowFixMe\n            prerenderFrame: proxyPrerenderFrame ? proxyPrerenderFrame.get() : null\n        }).then(({ container, frame, prerenderFrame }) => {\n            const innerContainer = this.renderTemplate(this.component.containerTemplate, { context, uid, container, frame, prerenderFrame, doc: document });\n            if (innerContainer) {\n                appendChild(container, innerContainer);\n                this.clean.register(() => destroyElement(innerContainer));\n                return getProxyObject(innerContainer);\n            }\n        });\n    }\n\n    destroy(err? : mixed, trigger? : boolean = true) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (!err) {\n                trigger = false;\n                err = new Error('Component destroyed');\n            }\n            this.component.log(`destroy`);\n            return this.onError(err, trigger);\n        }).then(() => {\n            return this.clean.all();\n        });\n    }\n\n    onError(err : mixed, trigger? : boolean = true) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.handledErrors.indexOf(err) !== -1) {\n                return;\n            }\n\n            this.handledErrors.push(err);\n            this.initPromise.asyncReject(err);\n\n            if (trigger) {\n                return this.event.trigger(EVENT.ERROR, err);\n            }\n        });\n    }\n\n    openBridge(proxyWin : ProxyWindow, domain : string, context : $Values<typeof CONTEXT>) : ?ZalgoPromise<?CrossDomainWindowType> {\n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            return ZalgoPromise.try(() => {\n                return proxyWin.awaitWindow();\n\n            }).then(win => {\n                if (!bridge || !bridge.needsBridge({ win, domain }) || bridge.hasBridge(domain, domain)) {\n                    return;\n                }\n\n                const bridgeUrl = this.component.getBridgeUrl();\n\n                if (!bridgeUrl) {\n                    throw new Error(`Bridge needed to render ${ context }`);\n                }\n\n                const bridgeDomain = getDomainFromUrl(bridgeUrl);\n                bridge.linkUrl(win, domain);\n                return bridge.openBridge(normalizeMockUrl(bridgeUrl), bridgeDomain);\n            });\n        }\n    }\n}\n","/* @flow */\n\nimport { onCloseWindow, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { ProxyWindow } from 'post-robot/src';\nimport { cleanup, type CleanupType, type EventEmitterType } from 'belter/src';\n\nimport { ParentComponent } from '../parent';\nimport { RENDER_DRIVERS, type ContextDriverType } from '../parent/drivers';\nimport type { Component } from '../component';\n\nexport type DelegatePropsType = {|\n    onClose : () => ?ZalgoPromise<void>,\n    onDisplay : () => ?ZalgoPromise<void>,\n    window : ?ProxyWindow\n|};\n\nexport type DelegateOptionsType = {|\n    context : string,\n    props : DelegatePropsType,\n    overrides : {\n        close : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        event : EventEmitterType\n    }\n|};\n\nexport type DelegateReturnType = {|\n    overrides : Object,\n    destroy : () => ZalgoPromise<void>\n|};\n\nexport class DelegateComponent<P>  {\n\n    component : Component<P>\n    source : CrossDomainWindowType\n    context : string\n    driver : ContextDriverType\n    props : DelegatePropsType\n    clean : CleanupType\n\n    focus : () => ZalgoPromise<void>\n    resize : ({ width? : ?number, height? : ?number }) => ZalgoPromise<void>\n    renderTemplate : Function\n\n    close : () => ZalgoPromise<void>\n    onError : (mixed) => ZalgoPromise<void>\n    event : EventEmitterType\n\n    constructor(component : Component<P>, source : CrossDomainWindowType, options : DelegateOptionsType) {\n        this.component = component;\n        this.context = options.context;\n        this.driver = RENDER_DRIVERS[options.context];\n        this.clean = cleanup(this);\n        \n        this.focus = ParentComponent.prototype.focus;\n        this.resize = ParentComponent.prototype.resize;\n        this.renderTemplate = ParentComponent.prototype.renderTemplate;\n\n        // $FlowFixMe\n        this.props = {};\n        \n        for (const propName of Object.keys(options.props)) {\n            const propDef = this.component.getPropDefinition(propName);\n            if (propDef && propDef.allowDelegate && options.props[propName]) {\n                // $FlowFixMe\n                this.props[propName] = options.props[propName];\n            }\n        }\n\n        this.close   = options.overrides.close;\n        this.onError = options.overrides.onError;\n        this.event   = options.overrides.event;\n\n        this.component.registerActiveComponent(this);\n        this.clean.register(() => this.component.destroyActiveComponent(this));\n\n        this.watchForSourceClose(source);\n    }\n\n    getDelegate() : DelegateReturnType {\n        return {\n            overrides: this.getOverrides(),\n            destroy:   () => this.destroy()\n        };\n    }\n\n    watchForSourceClose(source : CrossDomainWindowType) {\n        const closeSourceWindowListener = onCloseWindow(source, () => this.destroy(), 3000);\n        this.clean.register(closeSourceWindowListener.cancel);\n    }\n\n    getOverrides() : { [string] : mixed } {\n        const overrides = {};\n        const self = this;\n\n        for (const key of this.driver.delegate) {\n            overrides[key] = function delegateOverride() : mixed {\n                // $FlowFixMe\n                return ParentComponent.prototype[key].apply(self, arguments);\n            };\n            overrides[key].__name__ = key;\n        }\n\n        return overrides;\n    }\n\n    destroy() : ZalgoPromise<void> {\n        return this.clean.all();\n    }\n}\n","/* @flow */\n/* eslint react/no-deprecated: off, react/no-find-dom-node: off, react/display-name: off, react/no-did-mount-set-state: off, react/destructuring-assignment: off, react/prop-types: off */\n\nimport { extend, noop } from 'belter/src';\n\nimport type { Component, ComponentDriverType } from '../component';\nimport { CONTEXT } from '../constants';\n\ndeclare class ReactClassType {\n\n}\n\ntype ReactElementType = {|\n\n|};\n\ndeclare class __ReactComponent {\n\n}\n\ntype ReactType = {|\n    Component : __ReactComponent,\n    createClass : ({ render : () => ReactElementType, componentDidMount : () => void, componentDidUpdate : () => void }) => (typeof ReactClassType),\n    createElement : (string, ?{ [string] : mixed }, ...children : $ReadOnlyArray<ReactElementType>) => ReactElementType\n|};\n\ntype ReactDomType = {|\n    findDOMNode : (typeof ReactClassType) => HTMLElement\n|};\n\ntype ReactLibraryType = {|\n    React : ReactType,\n    ReactDOM : ReactDomType\n|};\n\nexport const react : ComponentDriverType<*, ReactLibraryType> = {\n\n    register(component : Component<*>, { React, ReactDOM } : ReactLibraryType) : (typeof ReactClassType) {\n\n        // $FlowFixMe\n        return class extends React.Component {\n            render() : ReactElementType {\n                return React.createElement('div', null);\n            }\n\n            componentDidMount() {\n                component.log(`instantiate_react_component`);\n                \n                const el = ReactDOM.findDOMNode(this);\n\n                const parent = component.init(extend({}, this.props));\n                parent.render(el, CONTEXT.IFRAME);\n                this.setState({ parent });\n            }\n\n            componentDidUpdate() {\n\n                if (this.state && this.state.parent) {\n                    this.state.parent.updateProps(extend({}, this.props)).catch(noop);\n                }\n            }\n        };\n    }\n};\n","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","/* @flow */\n\nimport { noop } from 'belter/src';\n\nimport type { Component, ComponentDriverType } from '../component';\nimport { CONTEXT } from '../constants';\n\ntype VueComponent = {|\n    render : (Function) => Element,\n    inheritAttrs : boolean,\n    mounted : () => void,\n    watch : {|\n        $attrs : {|\n            deep : boolean,\n            handler : () => void\n        |}\n    |}\n|};\n\ntype RegisteredVueComponent = {|\n    \n|};\n\ntype VueType = {|\n    component : (string, VueComponent) => RegisteredVueComponent\n|};\n\nexport const vue : ComponentDriverType<*, VueType> = {\n\n    register<P>(component : Component<P>, Vue : VueType) : RegisteredVueComponent {\n\n        return Vue.component(component.tag, {\n            render(createElement) : Element {\n                return createElement('div');\n            },\n\n            inheritAttrs: false,\n\n            mounted() {\n                const el = this.$el;\n                \n                this.parent = component.init({ ...this.$attrs });\n                this.parent.render(el, CONTEXT.IFRAME);\n            },\n\n            watch: {\n                $attrs: {\n                    handler: function handler() {\n                        if (this.parent && this.$attrs) {\n                            this.parent.updateProps({ ...this.$attrs }).catch(noop);\n                        }\n                    },\n                    deep: true\n                }\n            }\n        });\n    }\n};\n","/* @flow */\n\nimport { dasherizeToCamel, replaceObject, noop } from 'belter/src';\n\nimport type { Component, ComponentDriverType } from '../component';\nimport { CONTEXT } from '../constants';\n\ntype AngularModule = {|\n    directive : (string, () => {\n        scope : { [string] : '=' | '@' },\n        restrict : string,\n        controller : $ReadOnlyArray<string | Function>\n    }) => AngularModule\n|};\n\ntype Angular = {|\n    module : (string, $ReadOnlyArray<string>) => AngularModule\n|};\n\nexport const angular : ComponentDriverType<*, Angular> = {\n\n    register(component : Component<*>, ng : Angular) : AngularModule {\n\n        const module = ng.module(component.tag, []).directive(dasherizeToCamel(component.tag), () => {\n\n            const scope = {};\n\n            for (const key of component.getPropNames()) {\n                scope[key] = '=';\n            }\n\n            scope.props = '=';\n\n            return {\n                scope,\n\n                restrict: 'E',\n\n                controller: [ '$scope', '$element', ($scope, $element) => {\n                    component.log(`instantiate_angular_component`);\n\n                    function safeApply() {\n                        if ($scope.$root.$$phase !== '$apply' && $scope.$root.$$phase !== '$digest') {\n                            try {\n                                $scope.$apply();\n                            } catch (err) {\n                                // pass\n                            }\n                        }\n                    }\n\n                    const getProps = () => {\n                        return replaceObject($scope.props, item => {\n                            if (typeof item === 'function') {\n                                return function angularWrapped() : mixed {\n                                    // $FlowFixMe\n                                    const result = item.apply(this, arguments);\n                                    safeApply();\n                                    return result;\n                                };\n                            }\n                            return item;\n                        });\n                    };\n\n                    const instance = component.init(getProps());\n                    instance.render($element[0], CONTEXT.IFRAME);\n\n                    $scope.$watch(() => {\n                        instance.updateProps(getProps()).catch(noop);\n                    });\n                } ]\n            };\n        });\n\n        return module;\n    }\n};\n","/* @flow */\n/* eslint new-cap: 0 */\n\nimport { replaceObject } from 'belter/src';\n\nimport type { Component, ComponentDriverType } from '../component';\nimport { CONTEXT } from '../constants';\n\ntype Angular2Injection = {||};\n\ntype Angular2Component = {||};\n\ntype Angular2Module = {||};\n\ntype Angular2 = {|\n    Component : ({ selector : string, template : string, inputs : $ReadOnlyArray<string> }) => {\n        Class : ({ constructor : $ReadOnlyArray<Angular2Injection | Function>, ngOnInit : () => void, ngDoCheck : () => void }) => Angular2Component\n    },\n    NgModule : ({ declarations : $ReadOnlyArray<Angular2Component>, exports : $ReadOnlyArray<Angular2Component> }) => {\n        Class : ({ constructor : () => void }) => Angular2Module\n    },\n    ElementRef : Angular2Injection,\n    NgZone : Angular2Injection\n|};\n\nconst equals = (obj1, obj2) => {\n    const checked = {};\n\n    for (const key in obj1) {\n        if (obj1.hasOwnProperty(key)) {\n            checked[key] = true;\n\n            if (obj1[key] !== obj2[key]) {\n                return false;\n            }\n        }\n    }\n\n    for (const key in obj2) {\n        if (!checked[key]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\nexport const angular2 : ComponentDriverType<*, Angular2> = {\n\n    register(zoid : Component<*>, { Component : AngularComponent, NgModule, ElementRef, NgZone }) : Angular2Module {\n\n        zoid.log('initializing angular2 component');\n\n        const getProps = (component) => {\n            return replaceObject({ ...component.internalProps, ...component.props }, item => {\n                if (typeof item === 'function') {\n                    return function angular2Wrapped() : void {\n                        // $FlowFixMe\n                        return component.zone.run(() => item.apply(this, arguments));\n                    };\n                }\n                return item;\n            });\n        };\n\n        const ComponentInstance =\n            AngularComponent({\n                selector: zoid.tag,\n                template: '<div></div>',\n                inputs:   [ 'props' ]\n            }).Class({\n                constructor: [ ElementRef, NgZone, function angularConstructor(elementRef, zone) {\n                    this._props = {};\n                    this.elementRef = elementRef;\n                    this.zone = zone;\n                } ],\n                ngOnInit () {\n                    const targetElement = this.elementRef.nativeElement;\n                    \n                    this.parent = zoid.init(getProps(this));\n                    this.parent.render(targetElement, CONTEXT.IFRAME);\n                },\n                ngDoCheck() {\n                    if (this.parent && !equals(this._props, this.props)) {\n                        this._props = { ...this.props };\n                        this.parent.updateProps(getProps(this));\n                    }\n                }\n            });\n\n\n        const ModuleInstance = NgModule({\n            declarations: [ ComponentInstance ],\n            exports:      [ ComponentInstance ]\n        }).Class({\n            constructor () {\n                // pass\n            }\n        });\n\n        return ModuleInstance;\n    }\n};\n","/* @flow */\n/* eslint react/react-in-jsx-scope: off */\n\nimport { destroyElement, toCSS } from 'belter/src';\n\nimport { type RenderOptionsType } from '../../parent';\nimport { EVENT } from '../../constants';\n\nconst CLASS = {\n    VISIBLE:   'visible',\n    INVISIBLE: 'invisible'\n};\n\nexport function defaultContainerTemplate<P>({ uid, frame, prerenderFrame, doc, props, event, dimensions : { width, height } } : RenderOptionsType<P>) : ?HTMLElement {\n    if (__ZOID__.__DEFAULT_CONTAINER__) {\n        if (!frame || !prerenderFrame) {\n            return;\n        }\n\n        const div = doc.createElement('div');\n        div.setAttribute('id', uid);\n        div.classList.add('zoid-outlet');\n        const style = doc.createElement('style');\n        if (props.cspNonce) {\n            style.setAttribute('nonce', props.cspNonce);\n        }\n\n        style.appendChild(doc.createTextNode(`\n            #${ uid } {\n                display: inline-block;\n                position: relative;\n                width: ${ width };\n                height: ${ height };\n            }\n\n            #${ uid } > iframe {\n                display: inline-block;\n                position: absolute;\n                width: 100%;\n                height: 100%;\n                top: 0;\n                left: 0;\n                transition: opacity .2s ease-in-out;\n            }\n\n            #${ uid } > iframe.${ CLASS.INVISIBLE } {\n                opacity: 0;\n            }\n\n            #${ uid } > iframe.${ CLASS.VISIBLE } {\n                opacity: 1;\n        }\n        `));\n\n        div.appendChild(frame);\n        div.appendChild(prerenderFrame);\n        div.appendChild(style);\n\n        prerenderFrame.classList.add(CLASS.VISIBLE);\n        frame.classList.add(CLASS.INVISIBLE);\n\n        event.on(EVENT.RENDERED, () => {\n            prerenderFrame.classList.remove(CLASS.VISIBLE);\n            prerenderFrame.classList.add(CLASS.INVISIBLE);\n\n            frame.classList.remove(CLASS.INVISIBLE);\n            frame.classList.add(CLASS.VISIBLE);\n\n            setTimeout(() => {\n                destroyElement(prerenderFrame);\n            }, 1);\n        });\n\n        event.on(EVENT.RESIZE, ({ width: newWidth, height: newHeight }) => {\n            if (typeof newWidth === 'number') {\n                div.style.width = toCSS(newWidth);\n            }\n\n            if (typeof newHeight === 'number') {\n                div.style.height = toCSS(newHeight);\n            }\n        });\n\n        return div;\n    }\n}\n","/* @flow */\n/* eslint react/react-in-jsx-scope: off */\n\nimport { type RenderOptionsType } from '../../parent';\n\nexport function defaultPrerenderTemplate<P>({ doc, props } : RenderOptionsType<P>) : ?HTMLElement {\n    if (__ZOID__.__DEFAULT_PRERENDER__) {\n        const html = doc.createElement('html');\n        const body = doc.createElement('body');\n        const style = doc.createElement('style');\n        const spinner = doc.createElement('div');\n        spinner.classList.add('spinner');\n\n        if (props.cspNonce) {\n            style.setAttribute('nonce', props.cspNonce);\n        }\n\n        html.appendChild(body);\n        body.appendChild(spinner);\n        body.appendChild(style);\n        style.appendChild(doc.createTextNode(`\n            html, body {\n                width: 100%;\n                height: 100%;\n            }\n\n            .spinner {\n                position: fixed;\n                max-height: 60vmin;\n                max-width: 60vmin;\n                height: 40px;\n                width: 40px;\n                top: 50%;\n                left: 50%;\n                box-sizing: border-box;\n                border: 3px solid rgba(0, 0, 0, .2);\n                border-top-color: rgba(33, 128, 192, 0.8);\n                border-radius: 100%;\n                animation: rotation .7s infinite linear;\n            }\n\n            @keyframes rotation {\n                from {\n                    transform: translateX(-50%) translateY(-50%) rotate(0deg);\n                }\n                to {\n                    transform: translateX(-50%) translateY(-50%) rotate(359deg);\n                }\n            }\n        `));\n\n        return html;\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { once, noop } from 'belter/src';\nimport { isWindow, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ProxyWindow, toProxyWindow } from 'post-robot/src';\n\nimport { PROP_SERIALIZATION } from '../constants';\n\nexport type EventHandlerType<T> = (T) => void | ZalgoPromise<void>;\n\nexport type timeoutPropType = number;\nexport type windowPropType = CrossDomainWindowType | ProxyWindow;\nexport type cspNoncePropType = string;\nexport type closePropType = () => ZalgoPromise<void>;\nexport type focusPropType = () => ZalgoPromise<void>;\nexport type resizePropType = ({ width : ?number, height : ?number }) => ZalgoPromise<void>;\n\nexport type onDisplayPropType = EventHandlerType<void>;\nexport type onRenderedPropType = EventHandlerType<void>;\nexport type onRenderPropType = EventHandlerType<void>;\nexport type onClosePropType = EventHandlerType<void>;\nexport type onResizePropType = EventHandlerType<void>;\nexport type onErrorPropType = EventHandlerType<mixed>;\nexport type onPropsPropType<P> = ((PropsType<P>) => void) => void; // eslint-disable-line no-use-before-define\n\nexport type PropsInputType<P> = {\n    timeout? : timeoutPropType,\n    window? : windowPropType,\n    cspNonce? : cspNoncePropType,\n\n    onDisplay? : onDisplayPropType,\n    onRendered? : onRenderedPropType,\n    onRender? : onRenderPropType,\n    onClose? : onClosePropType,\n    onResize? : onResizePropType,\n    onError? : onErrorPropType,\n    onProps? : onPropsPropType<P>\n} & P;\n\nexport type PropsType<P> = {|\n    timeout? : timeoutPropType,\n    window? : ?windowPropType,\n    close? : ?closePropType,\n    focus? : ?focusPropType,\n    resize? : ?resizePropType,\n    cspNonce? : ?cspNoncePropType,\n\n    onDisplay : onDisplayPropType,\n    onRendered : onRenderedPropType,\n    onRender : onRenderPropType,\n    onClose : onClosePropType,\n    onResize : onResizePropType,\n    onError : onErrorPropType,\n    onProps : onPropsPropType<P>\n|} & P;\n\ntype PropDefinitionType<T, P, S : string> = {|\n    type : S,\n    alias? : string,\n    value? : ({ props : P, state : Object, close : () => ZalgoPromise<void>, focus : () => ZalgoPromise<void>, onError : (mixed) => ZalgoPromise<void> }) => ?T,\n    required? : boolean,\n    queryParam? : boolean | string | ({ value : T }) => (string | ZalgoPromise<string>),\n    queryValue? : ({ value : T }) => (ZalgoPromise<mixed> | mixed),\n    sendToChild? : boolean,\n    allowDelegate? : boolean,\n    validate? : ({ value : T, props : PropsInputType<P> }) => void,\n    decorate? : ({ value : T, props : PropsType<P>, state : Object, close : () => ZalgoPromise<void>, focus : () => ZalgoPromise<void>, onError : (mixed) => ZalgoPromise<void> }) => T,\n    default? : ({ props : P, state : Object }) => ?T,\n    sameDomain? : boolean,\n    serialization? : $Values<typeof PROP_SERIALIZATION>,\n    childDecorate? : ({ value : T, close : () => ZalgoPromise<void>, focus : () => ZalgoPromise<void>, onError : (mixed) => ZalgoPromise<void>, onProps : ((PropsType<P>) => void) => void, resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void> }) => ?T\n|};\n\nexport type BooleanPropDefinitionType<T : boolean, P> = PropDefinitionType<T, P, 'boolean'>;\nexport type StringPropDefinitionType<T : string, P> = PropDefinitionType<T, P, 'string'>;\nexport type NumberPropDefinitionType<T : number, P> = PropDefinitionType<T, P, 'number'>;\nexport type FunctionPropDefinitionType<T : Function, P> = PropDefinitionType<T, P, 'function'>;\nexport type ArrayPropDefinitionType<T : Array<*> | $ReadOnlyArray<*>, P> = PropDefinitionType<T, P, 'array'>; // eslint-disable-line flowtype/no-mutable-array\nexport type ObjectPropDefinitionType<T : Object, P> = PropDefinitionType<T, P, 'object'>;\n\nexport type MixedPropDefinitionType<P> = BooleanPropDefinitionType<*, P> | StringPropDefinitionType<*, P> | NumberPropDefinitionType<*, P> | FunctionPropDefinitionType<*, P> | ObjectPropDefinitionType<*, P> | ArrayPropDefinitionType<*, P>;\n\nexport type UserPropsDefinitionType<P> = {\n    [string] : MixedPropDefinitionType<P>\n};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type BuiltInPropsDefinitionType<P> = {\n    timeout : NumberPropDefinitionType<timeoutPropType, P>,\n    window : ObjectPropDefinitionType<windowPropType, P>,\n    close : FunctionPropDefinitionType<closePropType, P>,\n    focus : FunctionPropDefinitionType<focusPropType, P>,\n    resize : FunctionPropDefinitionType<resizePropType, P>,\n\n    onDisplay : FunctionPropDefinitionType<onDisplayPropType, P>,\n    onRendered : FunctionPropDefinitionType<onRenderedPropType, P>,\n    onRender : FunctionPropDefinitionType<onRenderPropType, P>,\n    onClose : FunctionPropDefinitionType<onClosePropType, P>,\n    onResize : FunctionPropDefinitionType<onClosePropType, P>,\n    onError : FunctionPropDefinitionType<onErrorPropType, P>,\n    onProps : FunctionPropDefinitionType<onPropsPropType<P>, P>\n};\n\nconst defaultNoop = () => noop;\nconst decorateOnce = ({ value }) => once(value);\n\nexport function getBuiltInProps<P>() : BuiltInPropsDefinitionType<P> {\n    return {\n        window: {\n            type:          'object',\n            sendToChild:   false,\n            required:      false,\n            allowDelegate: true,\n            validate({ value } : { value : CrossDomainWindowType | ProxyWindow }) {\n                if (!isWindow(value) && !ProxyWindow.isProxyWindow(value)) {\n                    throw new Error(`Expected Window or ProxyWindow`);\n                }\n            },\n            decorate({ value } : { value : CrossDomainWindowType | ProxyWindow }) : ProxyWindow {\n                return toProxyWindow(value);\n            }\n        },\n\n        timeout: {\n            type:        'number',\n            required:    false,\n            sendToChild: false\n        },\n\n        close: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ close }) => close\n        },\n\n        focus: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ focus }) => focus\n        },\n\n        resize: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ resize }) => resize\n        },\n\n        cspNonce: {\n            type:     'string',\n            required: false\n        },\n\n        getParent: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ getParent }) => getParent\n        },\n\n        getParentDomain: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ getParentDomain }) => getParentDomain\n        },\n\n        onDisplay: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onRendered: {\n            type:        'function',\n            required:    false,\n            sendToChild: false,\n            default:     defaultNoop,\n            decorate:    decorateOnce\n        },\n\n        onRender: {\n            type:        'function',\n            required:    false,\n            sendToChild: false,\n            default:     defaultNoop,\n            decorate:    decorateOnce\n        },\n\n        onClose: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onResize: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop\n        },\n\n        onError: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ onError }) => onError\n        },\n\n        onProps: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            default:       defaultNoop,\n            childDecorate: ({ onProps }) => onProps\n        }\n    };\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { setup as setupPostRobot, on, send, bridge, toProxyWindow, destroy as destroyPostRobot } from 'post-robot/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindow, getDomainFromUrl, type CrossDomainWindowType, isSameTopWindow, getDomain, matchDomain, isSameDomain } from 'cross-domain-utils/src';\nimport { isRegex, noop, isElement } from 'belter/src';\n\nimport { ChildComponent, getChildPayload } from '../child';\nimport { ParentComponent, type RenderOptionsType, type ParentHelpers } from '../parent';\nimport { DelegateComponent } from '../delegate';\nimport { CONTEXT, POST_MESSAGE, WILDCARD, DEFAULT_DIMENSIONS } from '../constants';\nimport { react, angular, vue, angular2 } from '../drivers';\nimport { getGlobal, destroyGlobal } from '../lib';\nimport type { CssDimensionsType, StringMatcherType } from '../types';\n\nimport { validate } from './validate';\nimport { defaultContainerTemplate, defaultPrerenderTemplate } from './templates';\nimport { getBuiltInProps, type UserPropsDefinitionType, type BuiltInPropsDefinitionType, type PropsInputType, type PropsType, type MixedPropDefinitionType } from './props';\n\ntype LoggerPayload = { [string] : ?string };\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype Logger = {\n    debug : (event : string, payload? : LoggerPayload) => any, // eslint-disable-line flowtype/no-weak-types\n    info : (event : string, payload? : LoggerPayload) => any, // eslint-disable-line flowtype/no-weak-types\n    warn : (event : string, payload? : LoggerPayload) => any, // eslint-disable-line flowtype/no-weak-types\n    error : (event : string, payload? : LoggerPayload) => any // eslint-disable-line flowtype/no-weak-types\n};\n\n/*  Component\n    ---------\n\n    This is the spec for the component. The idea is, when I call zoid.create(), it will create a new instance\n    of Component with the blueprint needed to set up ParentComponents and ChildComponents.\n\n    This is the one portion of code which is required by -- and shared to -- both the parent and child windows, and\n    contains all of the configuration needed for them to set themselves up.\n*/\n\nexport type ComponentOptionsType<P> = {|\n\n    tag : string,\n\n    url : string | ({ props : PropsType<P> }) => string,\n    domain? : string | RegExp,\n    bridgeUrl? : string,\n\n    props? : UserPropsDefinitionType<P>,\n\n    dimensions? : CssDimensionsType,\n    autoResize? : { width? : boolean, height? : boolean, element? : string },\n\n    allowedParentDomains? : StringMatcherType,\n\n    attributes? : {\n        iframe? : { [string] : string },\n        popup? : { [string] : string }\n    },\n\n    defaultContext? : $Values<typeof CONTEXT>,\n\n    containerTemplate? : (RenderOptionsType<P>) => ?HTMLElement,\n    prerenderTemplate? : (RenderOptionsType<P>) => ?HTMLElement,\n\n    validate? : ({ props : PropsInputType<P> }) => void,\n\n    logger? : Logger\n|};\n\ntype ZoidRenderer = {|\n    render : (container? : string | HTMLElement, context? : $Values<typeof CONTEXT>) => ZalgoPromise<void>,\n    renderTo : (target : CrossDomainWindowType, container? : string, context? : $Values<typeof CONTEXT>) => ZalgoPromise<void>\n|};\n\nexport type ZoidComponentInstance<P> = {| ...ParentHelpers<P>, ...ZoidRenderer |};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type ZoidComponent<P> = {\n    (PropsInputType<P>) : ZoidComponentInstance<P>,\n    driver : (string, mixed) => mixed,\n    isChild : () => boolean,\n    xprops? : PropsType<P>,\n    canRenderTo : (CrossDomainWindowType) => ZalgoPromise<boolean>\n};\n\nexport class Component<P> {\n\n    tag : string\n    name : string\n    \n    url : string | ({ props : PropsType<P> }) => string\n    domain : void | string | RegExp\n    bridgeUrl : void | string\n\n    props : UserPropsDefinitionType<P>\n    builtinProps : BuiltInPropsDefinitionType<P>\n\n    dimensions : CssDimensionsType\n    autoResize : void | { width? : boolean, height? : boolean, element? : string }\n\n    allowedParentDomains : StringMatcherType\n\n    defaultContext : $Values<typeof CONTEXT>\n    \n    attributes : {\n        iframe? : { [string] : string },\n        popup? : { [string] : string }\n    }\n\n    containerTemplate : (RenderOptionsType<P>) => ?HTMLElement\n    prerenderTemplate : ?(RenderOptionsType<P>) => ?HTMLElement\n\n    validate : void | ({ props : PropsInputType<P> }) => void\n\n    driverCache : { [string] : mixed }\n\n    xprops : ?PropsType<P>\n\n    logger : Logger\n\n    propNames : $ReadOnlyArray<string>\n\n    constructor(options : ComponentOptionsType<P>) {\n        validate(options);\n\n        // The tag name of the component. Used by some drivers (e.g. angular) to turn the component into an html element,\n        // e.g. <my-component>\n\n        this.tag = options.tag;\n        this.name = this.tag.replace(/-/g, '_');\n\n        this.allowedParentDomains = options.allowedParentDomains || WILDCARD;\n\n        const global = getGlobal();\n        global.components = global.components || {};\n\n        if (global.components[this.tag]) {\n            throw new Error(`Can not register multiple components with the same tag: ${ this.tag }`);\n        }\n\n        // A json based spec describing what kind of props the component accepts. This is used to validate any props before\n        // they are passed down to the child.\n\n        this.builtinProps = getBuiltInProps();\n        this.props = options.props || {};\n\n        // The dimensions of the component, e.g. { width: '300px', height: '150px' }\n\n        const { width = DEFAULT_DIMENSIONS.WIDTH, height = DEFAULT_DIMENSIONS.HEIGHT } = options.dimensions || {};\n        this.dimensions = { width, height };\n\n        this.url = options.url;\n        this.domain = options.domain;\n        this.bridgeUrl = options.bridgeUrl;\n\n        this.attributes = options.attributes || {};\n        this.attributes.iframe = this.attributes.iframe || {};\n        this.attributes.popup = this.attributes.popup || {};\n\n        this.defaultContext = options.defaultContext || CONTEXT.IFRAME;\n\n        this.autoResize = options.autoResize;\n\n        if (options.containerTemplate) {\n            this.containerTemplate = options.containerTemplate;\n        } else if (__ZOID__.__DEFAULT_CONTAINER__) {\n            this.containerTemplate = defaultContainerTemplate;\n        }\n\n        if (options.prerenderTemplate) {\n            this.prerenderTemplate = options.prerenderTemplate;\n        } else if (__ZOID__.__DEFAULT_PRERENDER__) {\n            this.prerenderTemplate = defaultPrerenderTemplate;\n        }\n\n        this.validate = options.validate;\n\n        this.logger = options.logger || {\n            debug: noop,\n            info:  noop,\n            warn:  noop,\n            error: noop\n        };\n\n        this.registerChild();\n        this.listenDelegate();\n\n        global.components[this.tag] = this;\n    }\n\n    getPropNames() : $ReadOnlyArray<string> {\n        if (this.propNames) {\n            return this.propNames;\n        }\n\n        const propNames = Object.keys(this.props);\n        for (const key of Object.keys(this.builtinProps)) {\n            if (propNames.indexOf(key) === -1) {\n                propNames.push(key);\n            }\n        }\n\n        this.propNames = propNames;\n        return propNames;\n    }\n\n    getPropDefinition(name : string) : MixedPropDefinitionType<P> {\n        return this.props[name] || this.builtinProps[name];\n    }\n\n    driver(name : string, dep : mixed) : mixed {\n        if (__ZOID__.__FRAMEWORK_SUPPORT__) {\n            const drivers = { react, angular, vue, angular2 };\n\n            if (!drivers[name]) {\n                throw new Error(`Could not find driver for framework: ${ name }`);\n            }\n    \n            this.driverCache = this.driverCache || {};\n    \n            if (!this.driverCache[name]) {\n                this.driverCache[name] = drivers[name].register(this, dep);\n            }\n    \n            return this.driverCache[name];\n        } else {\n            throw new Error(`Driver support not enabled`);\n        }\n    }\n\n    registerChild() {\n        if (this.isChild()) {\n            if (window.xprops) {\n                throw new Error(`Can not register ${ this.name } as child - can not attach multiple components to the same window`);\n            }\n\n            const child = new ChildComponent(this);\n            window.xprops = this.xprops = child.getProps();\n        }\n    }\n\n    listenDelegate() {\n        on(`${ POST_MESSAGE.ALLOW_DELEGATE }_${ this.name }`, () => {\n            return true;\n        });\n\n        on(`${ POST_MESSAGE.DELEGATE }_${ this.name }`, ({ source, data: { context, props, overrides } }) => {\n            const delegate = new DelegateComponent(this, source, { context, props, overrides });\n            return delegate.getDelegate();\n        });\n    }\n\n    canRenderTo(win : CrossDomainWindowType) : ZalgoPromise<boolean> {\n        return send(win, `${ POST_MESSAGE.ALLOW_DELEGATE }_${ this.name }`).then(({ data }) => {\n            return data;\n        }).catch(() => {\n            return false;\n        });\n    }\n\n    getUrl(props : PropsType<P>) : string {\n        if (typeof this.url === 'function') {\n            return this.url({ props });\n        }\n\n        return this.url;\n    }\n\n    getChildDomain(props : PropsType<P>) : string {\n        if (this.domain && typeof this.domain === 'string') {\n            return this.domain;\n        }\n\n        return getDomainFromUrl(this.getUrl(props));\n    }\n\n    getDomain(props : PropsType<P>) : string | RegExp {\n        if (this.domain && isRegex(this.domain)) {\n            return this.domain;\n        }\n\n        return this.getChildDomain(props);\n    }\n\n    getBridgeUrl() : ?string {\n        if (this.bridgeUrl) {\n            return this.bridgeUrl;\n        }\n    }\n\n    isChild() : boolean {\n        const payload = getChildPayload();\n        return Boolean(payload && payload.tag === this.tag && payload.childDomain === getDomain());\n    }\n\n    getDefaultContainer(context : $Values<typeof CONTEXT>, container? : string | HTMLElement) : string | HTMLElement {\n        if (container) {\n            if (typeof container !== 'string' && !isElement(container)) {\n                throw new TypeError(`Expected string or element selector to be passed`);\n            }\n\n            return container;\n        }\n\n        if (context === CONTEXT.POPUP) {\n            return 'body';\n        }\n\n        throw new Error(`Expected element to be passed to render iframe`);\n    }\n\n    getDefaultContext(context : ?$Values<typeof CONTEXT>, props : PropsInputType<P>) : $Values<typeof CONTEXT> {\n        if (props.window) {\n            return toProxyWindow(props.window).getType();\n        }\n\n        if (context) {\n            if (context !== CONTEXT.IFRAME && context !== CONTEXT.POPUP) {\n                throw new Error(`Unrecognized context: ${ context }`);\n            }\n            \n            return context;\n        }\n\n        return this.defaultContext;\n    }\n\n    init(props : PropsInputType<P>) : ZoidComponentInstance<P> {\n\n        // $FlowFixMe\n        props = props || {};\n        \n        const parent = new ParentComponent(this, props);\n\n        const render = (target, container, context) => ZalgoPromise.try(() => {\n            if (!isWindow(target)) {\n                throw new Error(`Must pass window to renderTo`);\n            }\n\n            context = this.getDefaultContext(context, props);\n            container = this.getDefaultContainer(context, container);\n            return parent.render(target, container, context);\n        });\n\n        return {\n            ...parent.getHelpers(),\n            render:   (container, context) => render(window, container, context),\n            renderTo: (target, container, context) => render(target, container, context)\n        };\n    }\n\n    checkAllowRender(target : CrossDomainWindowType, domain : string | RegExp, container : string | HTMLElement) {\n        if (target === window) {\n            return;\n        }\n\n        if (!isSameTopWindow(window, target)) {\n            throw new Error(`Can only renderTo an adjacent frame`);\n        }\n\n        const origin = getDomain();\n\n        if (!matchDomain(domain, origin) && !isSameDomain(target)) {\n            throw new Error(`Can not render remotely to ${ domain.toString() } - can only render to ${ origin }`);\n        }\n\n        if (container && typeof container !== 'string') {\n            throw new Error(`Container passed to renderTo must be a string selector, got ${ typeof container } }`);\n        }\n    }\n\n    log(event : string, payload? : LoggerPayload) {\n        this.logger.info(`${ this.name }_${ event }`, payload);\n    }\n\n    registerActiveComponent<Q>(instance : ParentComponent<Q> | DelegateComponent<Q>) {\n        const global = getGlobal();\n        global.activeComponents = global.activeComponents || [];\n        global.activeComponents.push(instance);\n    }\n\n    destroyActiveComponent<Q>(instance : ParentComponent<Q> | DelegateComponent<Q>) {\n        const global = getGlobal();\n        global.activeComponents = global.activeComponents || [];\n        global.activeComponents.splice(global.activeComponents.indexOf(instance), 1);\n    }\n}\n\nexport type ComponentDriverType<P, T : mixed> = {|\n    register : (Component<P>, T) => mixed\n|};\n\nexport function create<P>(options : ComponentOptionsType<P>) : ZoidComponent<P> {\n    setupPostRobot();\n\n    const component : Component<P> = new Component(options);\n\n    const init = (props) => component.init(props);\n    init.driver = (name, dep) => component.driver(name, dep);\n    init.isChild = () => component.isChild();\n    init.canRenderTo = (win) => component.canRenderTo(win);\n    init.xprops = component.xprops;\n    \n    return init;\n}\n\nexport function destroyAll() : ZalgoPromise<void> {\n    if (bridge) {\n        bridge.destroyBridges();\n    }\n\n    const results = [];\n\n    const global = getGlobal();\n    global.activeComponents = global.activeComponents || [];\n    while (global.activeComponents.length) {\n        results.push(global.activeComponents[0].destroy(new Error(`zoid destroyed all`), false));\n    }\n\n    return ZalgoPromise.all(results).then(noop);\n}\n\nexport const destroyComponents = destroyAll;\n\nexport function destroy() {\n    destroyAll();\n    destroyGlobal();\n    destroyPostRobot();\n}\n","/* @flow */\n\nimport { isPerc, isPx, values } from 'belter/src';\n\nimport { CONTEXT, PROP_TYPE } from '../constants';\n\nimport type { ComponentOptionsType } from './index';\n\nfunction validatePropDefinitions<P>(options : ComponentOptionsType<P>) {\n\n    if (options.props && !(typeof options.props === 'object')) {\n        throw new Error(`Expected options.props to be an object`);\n    }\n\n    const PROP_TYPE_LIST = values(PROP_TYPE);\n\n    if (options.props) {\n        for (const key of Object.keys(options.props)) {\n            const prop = options.props[key];\n\n            if (!prop || !(typeof prop === 'object')) {\n                throw new Error(`Expected options.props.${ key } to be an object`);\n            }\n\n            if (!prop.type) {\n                throw new Error(`Expected prop.type`);\n            }\n\n            if (PROP_TYPE_LIST.indexOf(prop.type) === -1) {\n                throw new Error(`Expected prop.type to be one of ${ PROP_TYPE_LIST.join(', ') }`);\n            }\n\n            if (prop.required && prop.default) {\n                throw new Error(`Required prop can not have a default value`);\n            }\n\n            if (prop.type === PROP_TYPE.FUNCTION && prop.queryParam && !prop.queryValue) {\n                throw new Error(`Do not pass queryParam for function prop`);\n            }\n        }\n    }\n}\n\n// eslint-disable-next-line complexity\nexport function validate<P>(options : ?ComponentOptionsType<P>) { // eslint-ignore-line\n\n    if (!options) {\n        throw new Error(`Expected options to be passed`);\n    }\n\n    // eslint-disable-next-line security/detect-unsafe-regex, unicorn/no-unsafe-regex\n    if (!options.tag || !options.tag.match(/^([a-z0-9]+-)+[a-z0-9]+$/)) {\n        throw new Error(`Invalid options.tag: ${ options.tag }`);\n    }\n\n    validatePropDefinitions(options);\n\n    if (options.dimensions) {\n        if (options.dimensions && !isPx(options.dimensions.width) && !isPerc(options.dimensions.width)) {\n            throw new Error(`Expected options.dimensions.width to be a px or % string value`);\n        }\n\n        if (options.dimensions && !isPx(options.dimensions.height) && !isPerc(options.dimensions.height)) {\n            throw new Error(`Expected options.dimensions.height to be a px or % string value`);\n        }\n    }\n\n    if (options.defaultContext) {\n        if (options.defaultContext !== CONTEXT.IFRAME && options.defaultContext !== CONTEXT.POPUP) {\n            throw new Error(`Unsupported context type: ${ options.defaultContext || 'unknown' }`);\n        }\n    }\n\n    if (!options.url) {\n        throw new Error(`Must pass url`);\n    }\n\n    if (typeof options.url !== 'string' && typeof options.url !== 'function') {\n        throw new TypeError(`Expected url to be string or function`);\n    }\n\n    if (options.prerenderTemplate && typeof options.prerenderTemplate !== 'function') {\n        throw new Error(`Expected options.prerenderTemplate to be a function`);\n    }\n\n    if ((options.containerTemplate || !__ZOID__.__DEFAULT_CONTAINER__) && typeof options.containerTemplate !== 'function') {\n        throw new Error(`Expected options.containerTemplate to be a function`);\n    }\n}\n","/* @flow */\n\nexport { PopupOpenError } from 'belter/src';\nexport { create, destroy, destroyComponents, destroyAll, Component } from './component';\nexport type { ZoidComponent, ZoidComponentInstance } from './component';\nexport type { RenderOptionsType } from './parent';\nexport { PROP_TYPE, PROP_SERIALIZATION, CONTEXT, EVENT } from './constants';\n"],"sourceRoot":""}